using Gtk 4.0;
using Gio 2.0;

template $M64PRS_MovieDialogWindow: Gtk.Window {
  title: bind $cond_string(template.load, "Load Movie...", "New Movie...") as <string>;

  Box {
    orientation: vertical;

    Grid {
      halign: fill;
      valign: fill;
      hexpand: true;
      vexpand: true;
      margin-top: 10;
      margin-bottom: 10;
      margin-start: 10;
      margin-end: 10;
      row-spacing: 10;
      column-spacing: 10;

      Label {
        layout {
          column: 0;
          row: 0;
        }

        halign: end;
        xalign: 1.0;

        label: "Path: ";
      }

      Box {
        layout {
          column: 1;
          row: 0;
        }

        orientation: horizontal;
        spacing: 10;

        Entry {
          halign: fill;
          hexpand: true;

          editable: false;
          text: bind $gio_file_path(template.cur_file) as <string>;
        }

        Button {
          label: "Browse...";
          clicked => $prompt_file() swapped;
        }
      }

      Label {
        layout {
          column: 0;
          row: 1;
        }

        halign: end;
        xalign: 1.0;

        label: "Author: \n(max 222 bytes)";
      }

      ScrolledWindow {
        layout {
          column: 1;
          row: 1;
        }

        halign: fill;
        valign: fill;
        hexpand: true;
        vexpand: true;
        min-content-height: 100;
        height-request: 100;

        TextView author_field {
          editable: bind $not(template.load) as <bool>;
          wrap-mode: word_char;
          buffer: $M64PRS_SizedTextBuffer {
            max-len: 222;
          };
        }
      }

      Label {
        layout {
          column: 0;
          row: 2;
        }

        halign: end;
        xalign: 1.0;

        label: "Description: \n(max 256 bytes)";
      }

      ScrolledWindow {
        layout {
          column: 1;
          row: 2;
        }

        halign: fill;
        valign: fill;
        hexpand: true;
        vexpand: true;
        min-content-height: 100;
        height-request: 100;

        TextView description_field {
          editable: bind $not(template.load) as <bool>;
          wrap-mode: word_char;
          buffer: $M64PRS_SizedTextBuffer {
            max-len: 256;
          };
        }
      }

      Label {
        layout {
          column: 0;
          row: 3;
        }

        halign: end;
        xalign: 1.0;

        label: "Start Type: ";
      }

      Box {
        layout {
          column: 1;
          row: 3;
        }

        orientation: horizontal;
        homogeneous: true;

        halign: fill;
        hexpand: true;

        css-classes: [
          "linked"
        ];

        ToggleButton reset_btn {
          halign: fill;
          hexpand: true;

          // See MovieStartType::Reset
          active: bind $start_type_eq(template.start-type, 2) as <bool>;
          sensitive: bind $not(template.load) as <bool>;

          clicked => $ui_set_start_type() swapped;

          label: "Reset";
        }
        ToggleButton savestate_btn {
          halign: fill;
          hexpand: true;

          // See MovieStartType::Snapshot
          active: bind $start_type_eq(template.start-type, 1) as <bool>;
          sensitive: bind $not(template.load) as <bool>;
          group: reset_btn;

          clicked => $ui_set_start_type() swapped;

          label: "Savestate";
        }
        ToggleButton eeprom_btn {
          halign: fill;
          hexpand: true;

          // See MovieStartType::Eeprom
          active: bind $start_type_eq(template.start-type, 4) as <bool>;
          sensitive: false;
          group: reset_btn;

          clicked => $ui_set_start_type() swapped;

          label: "EEPROM";
        }
      }
    }

    Box {
      orientation: horizontal;
      spacing: 10;
      halign: end;

      Button {
        width-request: 100;
        label: "OK";
        clicked => $ok_clicked() swapped;
      }
      Button {
        width-request: 100;
        label: "Cancel";
        clicked => $cancel_clicked() swapped;
      }
    }
  }
}

FileDialog file_dialog {
  title: bind $cond_string(template.load, "Load Movie...", "New Movie...") as <string>;
  modal: true;
  filters: Gio.ListStore {
    FileFilter {
      name: "Mupen64 movie (*.m64)";
      patterns ["*.m64"]
    }
  };
}
AlertDialog error_dialog {
  modal: true;
  buttons: ["OK"];
}