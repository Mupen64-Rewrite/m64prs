//! Common types for keyboards input forwarding.

#[cfg(not(feature = "sdl2"))]
mod enums {
    //! Enums derived from the [sdl2](https://github.com/Rust-SDL2/rust-sdl2) crate.
    //!
    //! ```text,ignore
    //! The MIT License (MIT)
    //!
    //! Copyright (c) 2013 Mozilla Foundation
    //!
    //! Permission is hereby granted, free of charge, to any person obtaining a copy of
    //! this software and associated documentation files (the "Software"), to deal in
    //! the Software without restriction, including without limitation the rights to
    //! use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
    //! the Software, and to permit persons to whom the Software is furnished to do so,
    //! subject to the following conditions:
    //!
    //! The above copyright notice and this permission notice shall be included in all
    //! copies or substantial portions of the Software.
    //!
    //! THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    //! IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
    //! FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
    //! COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
    //! IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
    //! CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    //! ```

    #[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]
    pub struct Keycode(i32);

    impl Keycode {
        pub fn into_i32(self) -> i32 {
            self.0
        }
        pub fn from_i32(value: i32) -> Self {
            Self(value)
        }
    }

    #[allow(non_upper_case_globals, unused)]
    impl Keycode {
        pub const BACKSPACE: Keycode = Keycode(SDL_KeyCode::SDLK_BACKSPACE as i32);
        pub const TAB: Keycode = Keycode(SDL_KeyCode::SDLK_TAB as i32);
        pub const RETURN: Keycode = Keycode(SDL_KeyCode::SDLK_RETURN as i32);
        pub const ESCAPE: Keycode = Keycode(SDL_KeyCode::SDLK_ESCAPE as i32);
        pub const SPACE: Keycode = Keycode(SDL_KeyCode::SDLK_SPACE as i32);
        pub const EXCLAIM: Keycode = Keycode(SDL_KeyCode::SDLK_EXCLAIM as i32);
        pub const QUOTEDBL: Keycode = Keycode(SDL_KeyCode::SDLK_QUOTEDBL as i32);
        pub const HASH: Keycode = Keycode(SDL_KeyCode::SDLK_HASH as i32);
        pub const DOLLAR: Keycode = Keycode(SDL_KeyCode::SDLK_DOLLAR as i32);
        pub const PERCENT: Keycode = Keycode(SDL_KeyCode::SDLK_PERCENT as i32);
        pub const AMPERSAND: Keycode = Keycode(SDL_KeyCode::SDLK_AMPERSAND as i32);
        pub const QUOTE: Keycode = Keycode(SDL_KeyCode::SDLK_QUOTE as i32);
        pub const LEFTPAREN: Keycode = Keycode(SDL_KeyCode::SDLK_LEFTPAREN as i32);
        pub const RIGHTPAREN: Keycode = Keycode(SDL_KeyCode::SDLK_RIGHTPAREN as i32);
        pub const ASTERISK: Keycode = Keycode(SDL_KeyCode::SDLK_ASTERISK as i32);
        pub const PLUS: Keycode = Keycode(SDL_KeyCode::SDLK_PLUS as i32);
        pub const COMMA: Keycode = Keycode(SDL_KeyCode::SDLK_COMMA as i32);
        pub const MINUS: Keycode = Keycode(SDL_KeyCode::SDLK_MINUS as i32);
        pub const PERIOD: Keycode = Keycode(SDL_KeyCode::SDLK_PERIOD as i32);
        pub const SLASH: Keycode = Keycode(SDL_KeyCode::SDLK_SLASH as i32);
        pub const NUM_0: Keycode = Keycode(SDL_KeyCode::SDLK_0 as i32);
        pub const NUM_1: Keycode = Keycode(SDL_KeyCode::SDLK_1 as i32);
        pub const NUM_2: Keycode = Keycode(SDL_KeyCode::SDLK_2 as i32);
        pub const NUM_3: Keycode = Keycode(SDL_KeyCode::SDLK_3 as i32);
        pub const NUM_4: Keycode = Keycode(SDL_KeyCode::SDLK_4 as i32);
        pub const NUM_5: Keycode = Keycode(SDL_KeyCode::SDLK_5 as i32);
        pub const NUM_6: Keycode = Keycode(SDL_KeyCode::SDLK_6 as i32);
        pub const NUM_7: Keycode = Keycode(SDL_KeyCode::SDLK_7 as i32);
        pub const NUM_8: Keycode = Keycode(SDL_KeyCode::SDLK_8 as i32);
        pub const NUM_9: Keycode = Keycode(SDL_KeyCode::SDLK_9 as i32);
        pub const COLON: Keycode = Keycode(SDL_KeyCode::SDLK_COLON as i32);
        pub const SEMICOLON: Keycode = Keycode(SDL_KeyCode::SDLK_SEMICOLON as i32);
        pub const LESS: Keycode = Keycode(SDL_KeyCode::SDLK_LESS as i32);
        pub const EQUALS: Keycode = Keycode(SDL_KeyCode::SDLK_EQUALS as i32);
        pub const GREATER: Keycode = Keycode(SDL_KeyCode::SDLK_GREATER as i32);
        pub const QUESTION: Keycode = Keycode(SDL_KeyCode::SDLK_QUESTION as i32);
        pub const AT: Keycode = Keycode(SDL_KeyCode::SDLK_AT as i32);
        pub const LEFTBRACKET: Keycode = Keycode(SDL_KeyCode::SDLK_LEFTBRACKET as i32);
        pub const BACKSLASH: Keycode = Keycode(SDL_KeyCode::SDLK_BACKSLASH as i32);
        pub const RIGHTBRACKET: Keycode = Keycode(SDL_KeyCode::SDLK_RIGHTBRACKET as i32);
        pub const CARET: Keycode = Keycode(SDL_KeyCode::SDLK_CARET as i32);
        pub const UNDERSCORE: Keycode = Keycode(SDL_KeyCode::SDLK_UNDERSCORE as i32);
        pub const BACKQUOTE: Keycode = Keycode(SDL_KeyCode::SDLK_BACKQUOTE as i32);
        pub const A: Keycode = Keycode(SDL_KeyCode::SDLK_a as i32);
        pub const B: Keycode = Keycode(SDL_KeyCode::SDLK_b as i32);
        pub const C: Keycode = Keycode(SDL_KeyCode::SDLK_c as i32);
        pub const D: Keycode = Keycode(SDL_KeyCode::SDLK_d as i32);
        pub const E: Keycode = Keycode(SDL_KeyCode::SDLK_e as i32);
        pub const F: Keycode = Keycode(SDL_KeyCode::SDLK_f as i32);
        pub const G: Keycode = Keycode(SDL_KeyCode::SDLK_g as i32);
        pub const H: Keycode = Keycode(SDL_KeyCode::SDLK_h as i32);
        pub const I: Keycode = Keycode(SDL_KeyCode::SDLK_i as i32);
        pub const J: Keycode = Keycode(SDL_KeyCode::SDLK_j as i32);
        pub const K: Keycode = Keycode(SDL_KeyCode::SDLK_k as i32);
        pub const L: Keycode = Keycode(SDL_KeyCode::SDLK_l as i32);
        pub const M: Keycode = Keycode(SDL_KeyCode::SDLK_m as i32);
        pub const N: Keycode = Keycode(SDL_KeyCode::SDLK_n as i32);
        pub const O: Keycode = Keycode(SDL_KeyCode::SDLK_o as i32);
        pub const P: Keycode = Keycode(SDL_KeyCode::SDLK_p as i32);
        pub const Q: Keycode = Keycode(SDL_KeyCode::SDLK_q as i32);
        pub const R: Keycode = Keycode(SDL_KeyCode::SDLK_r as i32);
        pub const S: Keycode = Keycode(SDL_KeyCode::SDLK_s as i32);
        pub const T: Keycode = Keycode(SDL_KeyCode::SDLK_t as i32);
        pub const U: Keycode = Keycode(SDL_KeyCode::SDLK_u as i32);
        pub const V: Keycode = Keycode(SDL_KeyCode::SDLK_v as i32);
        pub const W: Keycode = Keycode(SDL_KeyCode::SDLK_w as i32);
        pub const X: Keycode = Keycode(SDL_KeyCode::SDLK_x as i32);
        pub const Y: Keycode = Keycode(SDL_KeyCode::SDLK_y as i32);
        pub const Z: Keycode = Keycode(SDL_KeyCode::SDLK_z as i32);
        pub const DELETE: Keycode = Keycode(SDL_KeyCode::SDLK_DELETE as i32);
        pub const CAPSLOCK: Keycode = Keycode(SDL_KeyCode::SDLK_CAPSLOCK as i32);
        pub const F1: Keycode = Keycode(SDL_KeyCode::SDLK_F1 as i32);
        pub const F2: Keycode = Keycode(SDL_KeyCode::SDLK_F2 as i32);
        pub const F3: Keycode = Keycode(SDL_KeyCode::SDLK_F3 as i32);
        pub const F4: Keycode = Keycode(SDL_KeyCode::SDLK_F4 as i32);
        pub const F5: Keycode = Keycode(SDL_KeyCode::SDLK_F5 as i32);
        pub const F6: Keycode = Keycode(SDL_KeyCode::SDLK_F6 as i32);
        pub const F7: Keycode = Keycode(SDL_KeyCode::SDLK_F7 as i32);
        pub const F8: Keycode = Keycode(SDL_KeyCode::SDLK_F8 as i32);
        pub const F9: Keycode = Keycode(SDL_KeyCode::SDLK_F9 as i32);
        pub const F10: Keycode = Keycode(SDL_KeyCode::SDLK_F10 as i32);
        pub const F11: Keycode = Keycode(SDL_KeyCode::SDLK_F11 as i32);
        pub const F12: Keycode = Keycode(SDL_KeyCode::SDLK_F12 as i32);
        pub const PRINTSCREEN: Keycode = Keycode(SDL_KeyCode::SDLK_PRINTSCREEN as i32);
        pub const SCROLLLOCK: Keycode = Keycode(SDL_KeyCode::SDLK_SCROLLLOCK as i32);
        pub const PAUSE: Keycode = Keycode(SDL_KeyCode::SDLK_PAUSE as i32);
        pub const INSERT: Keycode = Keycode(SDL_KeyCode::SDLK_INSERT as i32);
        pub const HOME: Keycode = Keycode(SDL_KeyCode::SDLK_HOME as i32);
        pub const PAGEUP: Keycode = Keycode(SDL_KeyCode::SDLK_PAGEUP as i32);
        pub const END: Keycode = Keycode(SDL_KeyCode::SDLK_END as i32);
        pub const PAGEDOWN: Keycode = Keycode(SDL_KeyCode::SDLK_PAGEDOWN as i32);
        pub const RIGHT: Keycode = Keycode(SDL_KeyCode::SDLK_RIGHT as i32);
        pub const LEFT: Keycode = Keycode(SDL_KeyCode::SDLK_LEFT as i32);
        pub const DOWN: Keycode = Keycode(SDL_KeyCode::SDLK_DOWN as i32);
        pub const UP: Keycode = Keycode(SDL_KeyCode::SDLK_UP as i32);
        pub const NUMLOCKCLEAR: Keycode = Keycode(SDL_KeyCode::SDLK_NUMLOCKCLEAR as i32);
        pub const KP_DIVIDE: Keycode = Keycode(SDL_KeyCode::SDLK_KP_DIVIDE as i32);
        pub const KP_MULTIPLY: Keycode = Keycode(SDL_KeyCode::SDLK_KP_MULTIPLY as i32);
        pub const KP_MINUS: Keycode = Keycode(SDL_KeyCode::SDLK_KP_MINUS as i32);
        pub const KP_PLUS: Keycode = Keycode(SDL_KeyCode::SDLK_KP_PLUS as i32);
        pub const KP_ENTER: Keycode = Keycode(SDL_KeyCode::SDLK_KP_ENTER as i32);
        pub const KP_1: Keycode = Keycode(SDL_KeyCode::SDLK_KP_1 as i32);
        pub const KP_2: Keycode = Keycode(SDL_KeyCode::SDLK_KP_2 as i32);
        pub const KP_3: Keycode = Keycode(SDL_KeyCode::SDLK_KP_3 as i32);
        pub const KP_4: Keycode = Keycode(SDL_KeyCode::SDLK_KP_4 as i32);
        pub const KP_5: Keycode = Keycode(SDL_KeyCode::SDLK_KP_5 as i32);
        pub const KP_6: Keycode = Keycode(SDL_KeyCode::SDLK_KP_6 as i32);
        pub const KP_7: Keycode = Keycode(SDL_KeyCode::SDLK_KP_7 as i32);
        pub const KP_8: Keycode = Keycode(SDL_KeyCode::SDLK_KP_8 as i32);
        pub const KP_9: Keycode = Keycode(SDL_KeyCode::SDLK_KP_9 as i32);
        pub const KP_0: Keycode = Keycode(SDL_KeyCode::SDLK_KP_0 as i32);
        pub const KP_PERIOD: Keycode = Keycode(SDL_KeyCode::SDLK_KP_PERIOD as i32);
        pub const APPLICATION: Keycode = Keycode(SDL_KeyCode::SDLK_APPLICATION as i32);
        pub const POWER: Keycode = Keycode(SDL_KeyCode::SDLK_POWER as i32);
        pub const KP_EQUALS: Keycode = Keycode(SDL_KeyCode::SDLK_KP_EQUALS as i32);
        pub const F13: Keycode = Keycode(SDL_KeyCode::SDLK_F13 as i32);
        pub const F14: Keycode = Keycode(SDL_KeyCode::SDLK_F14 as i32);
        pub const F15: Keycode = Keycode(SDL_KeyCode::SDLK_F15 as i32);
        pub const F16: Keycode = Keycode(SDL_KeyCode::SDLK_F16 as i32);
        pub const F17: Keycode = Keycode(SDL_KeyCode::SDLK_F17 as i32);
        pub const F18: Keycode = Keycode(SDL_KeyCode::SDLK_F18 as i32);
        pub const F19: Keycode = Keycode(SDL_KeyCode::SDLK_F19 as i32);
        pub const F20: Keycode = Keycode(SDL_KeyCode::SDLK_F20 as i32);
        pub const F21: Keycode = Keycode(SDL_KeyCode::SDLK_F21 as i32);
        pub const F22: Keycode = Keycode(SDL_KeyCode::SDLK_F22 as i32);
        pub const F23: Keycode = Keycode(SDL_KeyCode::SDLK_F23 as i32);
        pub const F24: Keycode = Keycode(SDL_KeyCode::SDLK_F24 as i32);
        pub const EXECUTE: Keycode = Keycode(SDL_KeyCode::SDLK_EXECUTE as i32);
        pub const HELP: Keycode = Keycode(SDL_KeyCode::SDLK_HELP as i32);
        pub const MENU: Keycode = Keycode(SDL_KeyCode::SDLK_MENU as i32);
        pub const SELECT: Keycode = Keycode(SDL_KeyCode::SDLK_SELECT as i32);
        pub const STOP: Keycode = Keycode(SDL_KeyCode::SDLK_STOP as i32);
        pub const AGAIN: Keycode = Keycode(SDL_KeyCode::SDLK_AGAIN as i32);
        pub const UNDO: Keycode = Keycode(SDL_KeyCode::SDLK_UNDO as i32);
        pub const CUT: Keycode = Keycode(SDL_KeyCode::SDLK_CUT as i32);
        pub const COPY: Keycode = Keycode(SDL_KeyCode::SDLK_COPY as i32);
        pub const PASTE: Keycode = Keycode(SDL_KeyCode::SDLK_PASTE as i32);
        pub const FIND: Keycode = Keycode(SDL_KeyCode::SDLK_FIND as i32);
        pub const MUTE: Keycode = Keycode(SDL_KeyCode::SDLK_MUTE as i32);
        pub const VOLUMEUP: Keycode = Keycode(SDL_KeyCode::SDLK_VOLUMEUP as i32);
        pub const VOLUMEDOWN: Keycode = Keycode(SDL_KeyCode::SDLK_VOLUMEDOWN as i32);
        pub const KP_COMMA: Keycode = Keycode(SDL_KeyCode::SDLK_KP_COMMA as i32);
        pub const KP_EQUALSAS400: Keycode = Keycode(SDL_KeyCode::SDLK_KP_EQUALSAS400 as i32);
        pub const ALTERASE: Keycode = Keycode(SDL_KeyCode::SDLK_ALTERASE as i32);
        pub const SYSREQ: Keycode = Keycode(SDL_KeyCode::SDLK_SYSREQ as i32);
        pub const CANCEL: Keycode = Keycode(SDL_KeyCode::SDLK_CANCEL as i32);
        pub const CLEAR: Keycode = Keycode(SDL_KeyCode::SDLK_CLEAR as i32);
        pub const PRIOR: Keycode = Keycode(SDL_KeyCode::SDLK_PRIOR as i32);
        pub const RETURN2: Keycode = Keycode(SDL_KeyCode::SDLK_RETURN2 as i32);
        pub const SEPARATOR: Keycode = Keycode(SDL_KeyCode::SDLK_SEPARATOR as i32);
        pub const OUT: Keycode = Keycode(SDL_KeyCode::SDLK_OUT as i32);
        pub const OPER: Keycode = Keycode(SDL_KeyCode::SDLK_OPER as i32);
        pub const CLEARAGAIN: Keycode = Keycode(SDL_KeyCode::SDLK_CLEARAGAIN as i32);
        pub const CRSEL: Keycode = Keycode(SDL_KeyCode::SDLK_CRSEL as i32);
        pub const EXSEL: Keycode = Keycode(SDL_KeyCode::SDLK_EXSEL as i32);
        pub const KP_00: Keycode = Keycode(SDL_KeyCode::SDLK_KP_00 as i32);
        pub const KP_000: Keycode = Keycode(SDL_KeyCode::SDLK_KP_000 as i32);
        pub const THOUSANDSSEPARATOR: Keycode =
            Keycode(SDL_KeyCode::SDLK_THOUSANDSSEPARATOR as i32);
        pub const DECIMALSEPARATOR: Keycode = Keycode(SDL_KeyCode::SDLK_DECIMALSEPARATOR as i32);
        pub const CURRENCYUNIT: Keycode = Keycode(SDL_KeyCode::SDLK_CURRENCYUNIT as i32);
        pub const CURRENCYSUBUNIT: Keycode = Keycode(SDL_KeyCode::SDLK_CURRENCYSUBUNIT as i32);
        pub const KP_LEFTPAREN: Keycode = Keycode(SDL_KeyCode::SDLK_KP_LEFTPAREN as i32);
        pub const KP_RIGHTPAREN: Keycode = Keycode(SDL_KeyCode::SDLK_KP_RIGHTPAREN as i32);
        pub const KP_LEFTBRACE: Keycode = Keycode(SDL_KeyCode::SDLK_KP_LEFTBRACE as i32);
        pub const KP_RIGHTBRACE: Keycode = Keycode(SDL_KeyCode::SDLK_KP_RIGHTBRACE as i32);
        pub const KP_TAB: Keycode = Keycode(SDL_KeyCode::SDLK_KP_TAB as i32);
        pub const KP_BACKSPACE: Keycode = Keycode(SDL_KeyCode::SDLK_KP_BACKSPACE as i32);
        pub const KP_A: Keycode = Keycode(SDL_KeyCode::SDLK_KP_A as i32);
        pub const KP_B: Keycode = Keycode(SDL_KeyCode::SDLK_KP_B as i32);
        pub const KP_C: Keycode = Keycode(SDL_KeyCode::SDLK_KP_C as i32);
        pub const KP_D: Keycode = Keycode(SDL_KeyCode::SDLK_KP_D as i32);
        pub const KP_E: Keycode = Keycode(SDL_KeyCode::SDLK_KP_E as i32);
        pub const KP_F: Keycode = Keycode(SDL_KeyCode::SDLK_KP_F as i32);
        pub const KP_XOR: Keycode = Keycode(SDL_KeyCode::SDLK_KP_XOR as i32);
        pub const KP_POWER: Keycode = Keycode(SDL_KeyCode::SDLK_KP_POWER as i32);
        pub const KP_PERCENT: Keycode = Keycode(SDL_KeyCode::SDLK_KP_PERCENT as i32);
        pub const KP_LESS: Keycode = Keycode(SDL_KeyCode::SDLK_KP_LESS as i32);
        pub const KP_GREATER: Keycode = Keycode(SDL_KeyCode::SDLK_KP_GREATER as i32);
        pub const KP_AMPERSAND: Keycode = Keycode(SDL_KeyCode::SDLK_KP_AMPERSAND as i32);
        pub const KP_DBLAMPERSAND: Keycode = Keycode(SDL_KeyCode::SDLK_KP_DBLAMPERSAND as i32);
        pub const KP_VERTICALBAR: Keycode = Keycode(SDL_KeyCode::SDLK_KP_VERTICALBAR as i32);
        pub const KP_DBLVERTICALBAR: Keycode = Keycode(SDL_KeyCode::SDLK_KP_DBLVERTICALBAR as i32);
        pub const KP_COLON: Keycode = Keycode(SDL_KeyCode::SDLK_KP_COLON as i32);
        pub const KP_HASH: Keycode = Keycode(SDL_KeyCode::SDLK_KP_HASH as i32);
        pub const KP_SPACE: Keycode = Keycode(SDL_KeyCode::SDLK_KP_SPACE as i32);
        pub const KP_AT: Keycode = Keycode(SDL_KeyCode::SDLK_KP_AT as i32);
        pub const KP_EXCLAM: Keycode = Keycode(SDL_KeyCode::SDLK_KP_EXCLAM as i32);
        pub const KP_MEMSTORE: Keycode = Keycode(SDL_KeyCode::SDLK_KP_MEMSTORE as i32);
        pub const KP_MEMRECALL: Keycode = Keycode(SDL_KeyCode::SDLK_KP_MEMRECALL as i32);
        pub const KP_MEMCLEAR: Keycode = Keycode(SDL_KeyCode::SDLK_KP_MEMCLEAR as i32);
        pub const KP_MEMADD: Keycode = Keycode(SDL_KeyCode::SDLK_KP_MEMADD as i32);
        pub const KP_MEMSUBTRACT: Keycode = Keycode(SDL_KeyCode::SDLK_KP_MEMSUBTRACT as i32);
        pub const KP_MEMMULTIPLY: Keycode = Keycode(SDL_KeyCode::SDLK_KP_MEMMULTIPLY as i32);
        pub const KP_MEMDIVIDE: Keycode = Keycode(SDL_KeyCode::SDLK_KP_MEMDIVIDE as i32);
        pub const KP_PLUSMINUS: Keycode = Keycode(SDL_KeyCode::SDLK_KP_PLUSMINUS as i32);
        pub const KP_CLEAR: Keycode = Keycode(SDL_KeyCode::SDLK_KP_CLEAR as i32);
        pub const KP_CLEARENTRY: Keycode = Keycode(SDL_KeyCode::SDLK_KP_CLEARENTRY as i32);
        pub const KP_BINARY: Keycode = Keycode(SDL_KeyCode::SDLK_KP_BINARY as i32);
        pub const KP_OCTAL: Keycode = Keycode(SDL_KeyCode::SDLK_KP_OCTAL as i32);
        pub const KP_DECIMAL: Keycode = Keycode(SDL_KeyCode::SDLK_KP_DECIMAL as i32);
        pub const KP_HEXADECIMAL: Keycode = Keycode(SDL_KeyCode::SDLK_KP_HEXADECIMAL as i32);
        pub const LCTRL: Keycode = Keycode(SDL_KeyCode::SDLK_LCTRL as i32);
        pub const LSHIFT: Keycode = Keycode(SDL_KeyCode::SDLK_LSHIFT as i32);
        pub const LALT: Keycode = Keycode(SDL_KeyCode::SDLK_LALT as i32);
        pub const LGUI: Keycode = Keycode(SDL_KeyCode::SDLK_LGUI as i32);
        pub const RCTRL: Keycode = Keycode(SDL_KeyCode::SDLK_RCTRL as i32);
        pub const RSHIFT: Keycode = Keycode(SDL_KeyCode::SDLK_RSHIFT as i32);
        pub const RALT: Keycode = Keycode(SDL_KeyCode::SDLK_RALT as i32);
        pub const RGUI: Keycode = Keycode(SDL_KeyCode::SDLK_RGUI as i32);
        pub const MODE: Keycode = Keycode(SDL_KeyCode::SDLK_MODE as i32);
        pub const AUDIONEXT: Keycode = Keycode(SDL_KeyCode::SDLK_AUDIONEXT as i32);
        pub const AUDIOPREV: Keycode = Keycode(SDL_KeyCode::SDLK_AUDIOPREV as i32);
        pub const AUDIOSTOP: Keycode = Keycode(SDL_KeyCode::SDLK_AUDIOSTOP as i32);
        pub const AUDIOPLAY: Keycode = Keycode(SDL_KeyCode::SDLK_AUDIOPLAY as i32);
        pub const AUDIOMUTE: Keycode = Keycode(SDL_KeyCode::SDLK_AUDIOMUTE as i32);
        pub const MEDIASELECT: Keycode = Keycode(SDL_KeyCode::SDLK_MEDIASELECT as i32);
        pub const WWW: Keycode = Keycode(SDL_KeyCode::SDLK_WWW as i32);
        pub const MAIL: Keycode = Keycode(SDL_KeyCode::SDLK_MAIL as i32);
        pub const CALCULATOR: Keycode = Keycode(SDL_KeyCode::SDLK_CALCULATOR as i32);
        pub const COMPUTER: Keycode = Keycode(SDL_KeyCode::SDLK_COMPUTER as i32);
        pub const AC_SEARCH: Keycode = Keycode(SDL_KeyCode::SDLK_AC_SEARCH as i32);
        pub const AC_HOME: Keycode = Keycode(SDL_KeyCode::SDLK_AC_HOME as i32);
        pub const AC_BACK: Keycode = Keycode(SDL_KeyCode::SDLK_AC_BACK as i32);
        pub const AC_FORWARD: Keycode = Keycode(SDL_KeyCode::SDLK_AC_FORWARD as i32);
        pub const AC_STOP: Keycode = Keycode(SDL_KeyCode::SDLK_AC_STOP as i32);
        pub const AC_REFRESH: Keycode = Keycode(SDL_KeyCode::SDLK_AC_REFRESH as i32);
        pub const AC_BOOKMARKS: Keycode = Keycode(SDL_KeyCode::SDLK_AC_BOOKMARKS as i32);
        pub const BRIGHTNESSDOWN: Keycode = Keycode(SDL_KeyCode::SDLK_BRIGHTNESSDOWN as i32);
        pub const BRIGHTNESSUP: Keycode = Keycode(SDL_KeyCode::SDLK_BRIGHTNESSUP as i32);
        pub const DISPLAYSWITCH: Keycode = Keycode(SDL_KeyCode::SDLK_DISPLAYSWITCH as i32);
        pub const KBDILLUMTOGGLE: Keycode = Keycode(SDL_KeyCode::SDLK_KBDILLUMTOGGLE as i32);
        pub const KBDILLUMDOWN: Keycode = Keycode(SDL_KeyCode::SDLK_KBDILLUMDOWN as i32);
        pub const KBDILLUMUP: Keycode = Keycode(SDL_KeyCode::SDLK_KBDILLUMUP as i32);
        pub const EJECT: Keycode = Keycode(SDL_KeyCode::SDLK_EJECT as i32);
        pub const SLEEP: Keycode = Keycode(SDL_KeyCode::SDLK_SLEEP as i32);
    }

    #[repr(u32)]
    #[allow(non_camel_case_types, unused)]
    #[derive(Copy, Clone, Hash, PartialEq, Eq)]
    enum SDL_KeyCode {
        SDLK_UNKNOWN = 0,
        SDLK_RETURN = 13,
        SDLK_ESCAPE = 27,
        SDLK_BACKSPACE = 8,
        SDLK_TAB = 9,
        SDLK_SPACE = 32,
        SDLK_EXCLAIM = 33,
        SDLK_QUOTEDBL = 34,
        SDLK_HASH = 35,
        SDLK_PERCENT = 37,
        SDLK_DOLLAR = 36,
        SDLK_AMPERSAND = 38,
        SDLK_QUOTE = 39,
        SDLK_LEFTPAREN = 40,
        SDLK_RIGHTPAREN = 41,
        SDLK_ASTERISK = 42,
        SDLK_PLUS = 43,
        SDLK_COMMA = 44,
        SDLK_MINUS = 45,
        SDLK_PERIOD = 46,
        SDLK_SLASH = 47,
        SDLK_0 = 48,
        SDLK_1 = 49,
        SDLK_2 = 50,
        SDLK_3 = 51,
        SDLK_4 = 52,
        SDLK_5 = 53,
        SDLK_6 = 54,
        SDLK_7 = 55,
        SDLK_8 = 56,
        SDLK_9 = 57,
        SDLK_COLON = 58,
        SDLK_SEMICOLON = 59,
        SDLK_LESS = 60,
        SDLK_EQUALS = 61,
        SDLK_GREATER = 62,
        SDLK_QUESTION = 63,
        SDLK_AT = 64,
        SDLK_LEFTBRACKET = 91,
        SDLK_BACKSLASH = 92,
        SDLK_RIGHTBRACKET = 93,
        SDLK_CARET = 94,
        SDLK_UNDERSCORE = 95,
        SDLK_BACKQUOTE = 96,
        SDLK_a = 97,
        SDLK_b = 98,
        SDLK_c = 99,
        SDLK_d = 100,
        SDLK_e = 101,
        SDLK_f = 102,
        SDLK_g = 103,
        SDLK_h = 104,
        SDLK_i = 105,
        SDLK_j = 106,
        SDLK_k = 107,
        SDLK_l = 108,
        SDLK_m = 109,
        SDLK_n = 110,
        SDLK_o = 111,
        SDLK_p = 112,
        SDLK_q = 113,
        SDLK_r = 114,
        SDLK_s = 115,
        SDLK_t = 116,
        SDLK_u = 117,
        SDLK_v = 118,
        SDLK_w = 119,
        SDLK_x = 120,
        SDLK_y = 121,
        SDLK_z = 122,
        SDLK_CAPSLOCK = 1073741881,
        SDLK_F1 = 1073741882,
        SDLK_F2 = 1073741883,
        SDLK_F3 = 1073741884,
        SDLK_F4 = 1073741885,
        SDLK_F5 = 1073741886,
        SDLK_F6 = 1073741887,
        SDLK_F7 = 1073741888,
        SDLK_F8 = 1073741889,
        SDLK_F9 = 1073741890,
        SDLK_F10 = 1073741891,
        SDLK_F11 = 1073741892,
        SDLK_F12 = 1073741893,
        SDLK_PRINTSCREEN = 1073741894,
        SDLK_SCROLLLOCK = 1073741895,
        SDLK_PAUSE = 1073741896,
        SDLK_INSERT = 1073741897,
        SDLK_HOME = 1073741898,
        SDLK_PAGEUP = 1073741899,
        SDLK_DELETE = 127,
        SDLK_END = 1073741901,
        SDLK_PAGEDOWN = 1073741902,
        SDLK_RIGHT = 1073741903,
        SDLK_LEFT = 1073741904,
        SDLK_DOWN = 1073741905,
        SDLK_UP = 1073741906,
        SDLK_NUMLOCKCLEAR = 1073741907,
        SDLK_KP_DIVIDE = 1073741908,
        SDLK_KP_MULTIPLY = 1073741909,
        SDLK_KP_MINUS = 1073741910,
        SDLK_KP_PLUS = 1073741911,
        SDLK_KP_ENTER = 1073741912,
        SDLK_KP_1 = 1073741913,
        SDLK_KP_2 = 1073741914,
        SDLK_KP_3 = 1073741915,
        SDLK_KP_4 = 1073741916,
        SDLK_KP_5 = 1073741917,
        SDLK_KP_6 = 1073741918,
        SDLK_KP_7 = 1073741919,
        SDLK_KP_8 = 1073741920,
        SDLK_KP_9 = 1073741921,
        SDLK_KP_0 = 1073741922,
        SDLK_KP_PERIOD = 1073741923,
        SDLK_APPLICATION = 1073741925,
        SDLK_POWER = 1073741926,
        SDLK_KP_EQUALS = 1073741927,
        SDLK_F13 = 1073741928,
        SDLK_F14 = 1073741929,
        SDLK_F15 = 1073741930,
        SDLK_F16 = 1073741931,
        SDLK_F17 = 1073741932,
        SDLK_F18 = 1073741933,
        SDLK_F19 = 1073741934,
        SDLK_F20 = 1073741935,
        SDLK_F21 = 1073741936,
        SDLK_F22 = 1073741937,
        SDLK_F23 = 1073741938,
        SDLK_F24 = 1073741939,
        SDLK_EXECUTE = 1073741940,
        SDLK_HELP = 1073741941,
        SDLK_MENU = 1073741942,
        SDLK_SELECT = 1073741943,
        SDLK_STOP = 1073741944,
        SDLK_AGAIN = 1073741945,
        SDLK_UNDO = 1073741946,
        SDLK_CUT = 1073741947,
        SDLK_COPY = 1073741948,
        SDLK_PASTE = 1073741949,
        SDLK_FIND = 1073741950,
        SDLK_MUTE = 1073741951,
        SDLK_VOLUMEUP = 1073741952,
        SDLK_VOLUMEDOWN = 1073741953,
        SDLK_KP_COMMA = 1073741957,
        SDLK_KP_EQUALSAS400 = 1073741958,
        SDLK_ALTERASE = 1073741977,
        SDLK_SYSREQ = 1073741978,
        SDLK_CANCEL = 1073741979,
        SDLK_CLEAR = 1073741980,
        SDLK_PRIOR = 1073741981,
        SDLK_RETURN2 = 1073741982,
        SDLK_SEPARATOR = 1073741983,
        SDLK_OUT = 1073741984,
        SDLK_OPER = 1073741985,
        SDLK_CLEARAGAIN = 1073741986,
        SDLK_CRSEL = 1073741987,
        SDLK_EXSEL = 1073741988,
        SDLK_KP_00 = 1073742000,
        SDLK_KP_000 = 1073742001,
        SDLK_THOUSANDSSEPARATOR = 1073742002,
        SDLK_DECIMALSEPARATOR = 1073742003,
        SDLK_CURRENCYUNIT = 1073742004,
        SDLK_CURRENCYSUBUNIT = 1073742005,
        SDLK_KP_LEFTPAREN = 1073742006,
        SDLK_KP_RIGHTPAREN = 1073742007,
        SDLK_KP_LEFTBRACE = 1073742008,
        SDLK_KP_RIGHTBRACE = 1073742009,
        SDLK_KP_TAB = 1073742010,
        SDLK_KP_BACKSPACE = 1073742011,
        SDLK_KP_A = 1073742012,
        SDLK_KP_B = 1073742013,
        SDLK_KP_C = 1073742014,
        SDLK_KP_D = 1073742015,
        SDLK_KP_E = 1073742016,
        SDLK_KP_F = 1073742017,
        SDLK_KP_XOR = 1073742018,
        SDLK_KP_POWER = 1073742019,
        SDLK_KP_PERCENT = 1073742020,
        SDLK_KP_LESS = 1073742021,
        SDLK_KP_GREATER = 1073742022,
        SDLK_KP_AMPERSAND = 1073742023,
        SDLK_KP_DBLAMPERSAND = 1073742024,
        SDLK_KP_VERTICALBAR = 1073742025,
        SDLK_KP_DBLVERTICALBAR = 1073742026,
        SDLK_KP_COLON = 1073742027,
        SDLK_KP_HASH = 1073742028,
        SDLK_KP_SPACE = 1073742029,
        SDLK_KP_AT = 1073742030,
        SDLK_KP_EXCLAM = 1073742031,
        SDLK_KP_MEMSTORE = 1073742032,
        SDLK_KP_MEMRECALL = 1073742033,
        SDLK_KP_MEMCLEAR = 1073742034,
        SDLK_KP_MEMADD = 1073742035,
        SDLK_KP_MEMSUBTRACT = 1073742036,
        SDLK_KP_MEMMULTIPLY = 1073742037,
        SDLK_KP_MEMDIVIDE = 1073742038,
        SDLK_KP_PLUSMINUS = 1073742039,
        SDLK_KP_CLEAR = 1073742040,
        SDLK_KP_CLEARENTRY = 1073742041,
        SDLK_KP_BINARY = 1073742042,
        SDLK_KP_OCTAL = 1073742043,
        SDLK_KP_DECIMAL = 1073742044,
        SDLK_KP_HEXADECIMAL = 1073742045,
        SDLK_LCTRL = 1073742048,
        SDLK_LSHIFT = 1073742049,
        SDLK_LALT = 1073742050,
        SDLK_LGUI = 1073742051,
        SDLK_RCTRL = 1073742052,
        SDLK_RSHIFT = 1073742053,
        SDLK_RALT = 1073742054,
        SDLK_RGUI = 1073742055,
        SDLK_MODE = 1073742081,
        SDLK_AUDIONEXT = 1073742082,
        SDLK_AUDIOPREV = 1073742083,
        SDLK_AUDIOSTOP = 1073742084,
        SDLK_AUDIOPLAY = 1073742085,
        SDLK_AUDIOMUTE = 1073742086,
        SDLK_MEDIASELECT = 1073742087,
        SDLK_WWW = 1073742088,
        SDLK_MAIL = 1073742089,
        SDLK_CALCULATOR = 1073742090,
        SDLK_COMPUTER = 1073742091,
        SDLK_AC_SEARCH = 1073742092,
        SDLK_AC_HOME = 1073742093,
        SDLK_AC_BACK = 1073742094,
        SDLK_AC_FORWARD = 1073742095,
        SDLK_AC_STOP = 1073742096,
        SDLK_AC_REFRESH = 1073742097,
        SDLK_AC_BOOKMARKS = 1073742098,
        SDLK_BRIGHTNESSDOWN = 1073742099,
        SDLK_BRIGHTNESSUP = 1073742100,
        SDLK_DISPLAYSWITCH = 1073742101,
        SDLK_KBDILLUMTOGGLE = 1073742102,
        SDLK_KBDILLUMDOWN = 1073742103,
        SDLK_KBDILLUMUP = 1073742104,
        SDLK_EJECT = 1073742105,
        SDLK_SLEEP = 1073742106,
        SDLK_APP1 = 1073742107,
        SDLK_APP2 = 1073742108,
        SDLK_AUDIOREWIND = 1073742109,
        SDLK_AUDIOFASTFORWARD = 1073742110,
        SDLK_SOFTLEFT = 1073742111,
        SDLK_SOFTRIGHT = 1073742112,
        SDLK_CALL = 1073742113,
        SDLK_ENDCALL = 1073742114,
    }

    bitflags::bitflags! {
        pub struct Mod: u16 {
            const NOMOD = 0x0000;
            const LSHIFTMOD = 0x0001;
            const RSHIFTMOD = 0x0002;
            const LCTRLMOD = 0x0040;
            const RCTRLMOD = 0x0080;
            const LALTMOD = 0x0100;
            const RALTMOD = 0x0200;
            const LGUIMOD = 0x0400;
            const RGUIMOD = 0x0800;
            const NUMMOD = 0x1000;
            const CAPSMOD = 0x2000;
            const MODEMOD = 0x4000;
            const RESERVEDMOD = 0x8000;
        }
    }

    #[repr(i32)]
    #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
    pub enum Scancode {
        A = SDL_Scancode::SDL_SCANCODE_A as i32,
        B = SDL_Scancode::SDL_SCANCODE_B as i32,
        C = SDL_Scancode::SDL_SCANCODE_C as i32,
        D = SDL_Scancode::SDL_SCANCODE_D as i32,
        E = SDL_Scancode::SDL_SCANCODE_E as i32,
        F = SDL_Scancode::SDL_SCANCODE_F as i32,
        G = SDL_Scancode::SDL_SCANCODE_G as i32,
        H = SDL_Scancode::SDL_SCANCODE_H as i32,
        I = SDL_Scancode::SDL_SCANCODE_I as i32,
        J = SDL_Scancode::SDL_SCANCODE_J as i32,
        K = SDL_Scancode::SDL_SCANCODE_K as i32,
        L = SDL_Scancode::SDL_SCANCODE_L as i32,
        M = SDL_Scancode::SDL_SCANCODE_M as i32,
        N = SDL_Scancode::SDL_SCANCODE_N as i32,
        O = SDL_Scancode::SDL_SCANCODE_O as i32,
        P = SDL_Scancode::SDL_SCANCODE_P as i32,
        Q = SDL_Scancode::SDL_SCANCODE_Q as i32,
        R = SDL_Scancode::SDL_SCANCODE_R as i32,
        S = SDL_Scancode::SDL_SCANCODE_S as i32,
        T = SDL_Scancode::SDL_SCANCODE_T as i32,
        U = SDL_Scancode::SDL_SCANCODE_U as i32,
        V = SDL_Scancode::SDL_SCANCODE_V as i32,
        W = SDL_Scancode::SDL_SCANCODE_W as i32,
        X = SDL_Scancode::SDL_SCANCODE_X as i32,
        Y = SDL_Scancode::SDL_SCANCODE_Y as i32,
        Z = SDL_Scancode::SDL_SCANCODE_Z as i32,
        Num1 = SDL_Scancode::SDL_SCANCODE_1 as i32,
        Num2 = SDL_Scancode::SDL_SCANCODE_2 as i32,
        Num3 = SDL_Scancode::SDL_SCANCODE_3 as i32,
        Num4 = SDL_Scancode::SDL_SCANCODE_4 as i32,
        Num5 = SDL_Scancode::SDL_SCANCODE_5 as i32,
        Num6 = SDL_Scancode::SDL_SCANCODE_6 as i32,
        Num7 = SDL_Scancode::SDL_SCANCODE_7 as i32,
        Num8 = SDL_Scancode::SDL_SCANCODE_8 as i32,
        Num9 = SDL_Scancode::SDL_SCANCODE_9 as i32,
        Num0 = SDL_Scancode::SDL_SCANCODE_0 as i32,
        Return = SDL_Scancode::SDL_SCANCODE_RETURN as i32,
        Escape = SDL_Scancode::SDL_SCANCODE_ESCAPE as i32,
        Backspace = SDL_Scancode::SDL_SCANCODE_BACKSPACE as i32,
        Tab = SDL_Scancode::SDL_SCANCODE_TAB as i32,
        Space = SDL_Scancode::SDL_SCANCODE_SPACE as i32,
        Minus = SDL_Scancode::SDL_SCANCODE_MINUS as i32,
        Equals = SDL_Scancode::SDL_SCANCODE_EQUALS as i32,
        LeftBracket = SDL_Scancode::SDL_SCANCODE_LEFTBRACKET as i32,
        RightBracket = SDL_Scancode::SDL_SCANCODE_RIGHTBRACKET as i32,
        Backslash = SDL_Scancode::SDL_SCANCODE_BACKSLASH as i32,
        NonUsHash = SDL_Scancode::SDL_SCANCODE_NONUSHASH as i32,
        Semicolon = SDL_Scancode::SDL_SCANCODE_SEMICOLON as i32,
        Apostrophe = SDL_Scancode::SDL_SCANCODE_APOSTROPHE as i32,
        Grave = SDL_Scancode::SDL_SCANCODE_GRAVE as i32,
        Comma = SDL_Scancode::SDL_SCANCODE_COMMA as i32,
        Period = SDL_Scancode::SDL_SCANCODE_PERIOD as i32,
        Slash = SDL_Scancode::SDL_SCANCODE_SLASH as i32,
        CapsLock = SDL_Scancode::SDL_SCANCODE_CAPSLOCK as i32,
        F1 = SDL_Scancode::SDL_SCANCODE_F1 as i32,
        F2 = SDL_Scancode::SDL_SCANCODE_F2 as i32,
        F3 = SDL_Scancode::SDL_SCANCODE_F3 as i32,
        F4 = SDL_Scancode::SDL_SCANCODE_F4 as i32,
        F5 = SDL_Scancode::SDL_SCANCODE_F5 as i32,
        F6 = SDL_Scancode::SDL_SCANCODE_F6 as i32,
        F7 = SDL_Scancode::SDL_SCANCODE_F7 as i32,
        F8 = SDL_Scancode::SDL_SCANCODE_F8 as i32,
        F9 = SDL_Scancode::SDL_SCANCODE_F9 as i32,
        F10 = SDL_Scancode::SDL_SCANCODE_F10 as i32,
        F11 = SDL_Scancode::SDL_SCANCODE_F11 as i32,
        F12 = SDL_Scancode::SDL_SCANCODE_F12 as i32,
        PrintScreen = SDL_Scancode::SDL_SCANCODE_PRINTSCREEN as i32,
        ScrollLock = SDL_Scancode::SDL_SCANCODE_SCROLLLOCK as i32,
        Pause = SDL_Scancode::SDL_SCANCODE_PAUSE as i32,
        Insert = SDL_Scancode::SDL_SCANCODE_INSERT as i32,
        Home = SDL_Scancode::SDL_SCANCODE_HOME as i32,
        PageUp = SDL_Scancode::SDL_SCANCODE_PAGEUP as i32,
        Delete = SDL_Scancode::SDL_SCANCODE_DELETE as i32,
        End = SDL_Scancode::SDL_SCANCODE_END as i32,
        PageDown = SDL_Scancode::SDL_SCANCODE_PAGEDOWN as i32,
        Right = SDL_Scancode::SDL_SCANCODE_RIGHT as i32,
        Left = SDL_Scancode::SDL_SCANCODE_LEFT as i32,
        Down = SDL_Scancode::SDL_SCANCODE_DOWN as i32,
        Up = SDL_Scancode::SDL_SCANCODE_UP as i32,
        NumLockClear = SDL_Scancode::SDL_SCANCODE_NUMLOCKCLEAR as i32,
        KpDivide = SDL_Scancode::SDL_SCANCODE_KP_DIVIDE as i32,
        KpMultiply = SDL_Scancode::SDL_SCANCODE_KP_MULTIPLY as i32,
        KpMinus = SDL_Scancode::SDL_SCANCODE_KP_MINUS as i32,
        KpPlus = SDL_Scancode::SDL_SCANCODE_KP_PLUS as i32,
        KpEnter = SDL_Scancode::SDL_SCANCODE_KP_ENTER as i32,
        Kp1 = SDL_Scancode::SDL_SCANCODE_KP_1 as i32,
        Kp2 = SDL_Scancode::SDL_SCANCODE_KP_2 as i32,
        Kp3 = SDL_Scancode::SDL_SCANCODE_KP_3 as i32,
        Kp4 = SDL_Scancode::SDL_SCANCODE_KP_4 as i32,
        Kp5 = SDL_Scancode::SDL_SCANCODE_KP_5 as i32,
        Kp6 = SDL_Scancode::SDL_SCANCODE_KP_6 as i32,
        Kp7 = SDL_Scancode::SDL_SCANCODE_KP_7 as i32,
        Kp8 = SDL_Scancode::SDL_SCANCODE_KP_8 as i32,
        Kp9 = SDL_Scancode::SDL_SCANCODE_KP_9 as i32,
        Kp0 = SDL_Scancode::SDL_SCANCODE_KP_0 as i32,
        KpPeriod = SDL_Scancode::SDL_SCANCODE_KP_PERIOD as i32,
        NonUsBackslash = SDL_Scancode::SDL_SCANCODE_NONUSBACKSLASH as i32,
        Application = SDL_Scancode::SDL_SCANCODE_APPLICATION as i32,
        Power = SDL_Scancode::SDL_SCANCODE_POWER as i32,
        KpEquals = SDL_Scancode::SDL_SCANCODE_KP_EQUALS as i32,
        F13 = SDL_Scancode::SDL_SCANCODE_F13 as i32,
        F14 = SDL_Scancode::SDL_SCANCODE_F14 as i32,
        F15 = SDL_Scancode::SDL_SCANCODE_F15 as i32,
        F16 = SDL_Scancode::SDL_SCANCODE_F16 as i32,
        F17 = SDL_Scancode::SDL_SCANCODE_F17 as i32,
        F18 = SDL_Scancode::SDL_SCANCODE_F18 as i32,
        F19 = SDL_Scancode::SDL_SCANCODE_F19 as i32,
        F20 = SDL_Scancode::SDL_SCANCODE_F20 as i32,
        F21 = SDL_Scancode::SDL_SCANCODE_F21 as i32,
        F22 = SDL_Scancode::SDL_SCANCODE_F22 as i32,
        F23 = SDL_Scancode::SDL_SCANCODE_F23 as i32,
        F24 = SDL_Scancode::SDL_SCANCODE_F24 as i32,
        Execute = SDL_Scancode::SDL_SCANCODE_EXECUTE as i32,
        Help = SDL_Scancode::SDL_SCANCODE_HELP as i32,
        Menu = SDL_Scancode::SDL_SCANCODE_MENU as i32,
        Select = SDL_Scancode::SDL_SCANCODE_SELECT as i32,
        Stop = SDL_Scancode::SDL_SCANCODE_STOP as i32,
        Again = SDL_Scancode::SDL_SCANCODE_AGAIN as i32,
        Undo = SDL_Scancode::SDL_SCANCODE_UNDO as i32,
        Cut = SDL_Scancode::SDL_SCANCODE_CUT as i32,
        Copy = SDL_Scancode::SDL_SCANCODE_COPY as i32,
        Paste = SDL_Scancode::SDL_SCANCODE_PASTE as i32,
        Find = SDL_Scancode::SDL_SCANCODE_FIND as i32,
        Mute = SDL_Scancode::SDL_SCANCODE_MUTE as i32,
        VolumeUp = SDL_Scancode::SDL_SCANCODE_VOLUMEUP as i32,
        VolumeDown = SDL_Scancode::SDL_SCANCODE_VOLUMEDOWN as i32,
        KpComma = SDL_Scancode::SDL_SCANCODE_KP_COMMA as i32,
        KpEqualsAS400 = SDL_Scancode::SDL_SCANCODE_KP_EQUALSAS400 as i32,
        International1 = SDL_Scancode::SDL_SCANCODE_INTERNATIONAL1 as i32,
        International2 = SDL_Scancode::SDL_SCANCODE_INTERNATIONAL2 as i32,
        International3 = SDL_Scancode::SDL_SCANCODE_INTERNATIONAL3 as i32,
        International4 = SDL_Scancode::SDL_SCANCODE_INTERNATIONAL4 as i32,
        International5 = SDL_Scancode::SDL_SCANCODE_INTERNATIONAL5 as i32,
        International6 = SDL_Scancode::SDL_SCANCODE_INTERNATIONAL6 as i32,
        International7 = SDL_Scancode::SDL_SCANCODE_INTERNATIONAL7 as i32,
        International8 = SDL_Scancode::SDL_SCANCODE_INTERNATIONAL8 as i32,
        International9 = SDL_Scancode::SDL_SCANCODE_INTERNATIONAL9 as i32,
        Lang1 = SDL_Scancode::SDL_SCANCODE_LANG1 as i32,
        Lang2 = SDL_Scancode::SDL_SCANCODE_LANG2 as i32,
        Lang3 = SDL_Scancode::SDL_SCANCODE_LANG3 as i32,
        Lang4 = SDL_Scancode::SDL_SCANCODE_LANG4 as i32,
        Lang5 = SDL_Scancode::SDL_SCANCODE_LANG5 as i32,
        Lang6 = SDL_Scancode::SDL_SCANCODE_LANG6 as i32,
        Lang7 = SDL_Scancode::SDL_SCANCODE_LANG7 as i32,
        Lang8 = SDL_Scancode::SDL_SCANCODE_LANG8 as i32,
        Lang9 = SDL_Scancode::SDL_SCANCODE_LANG9 as i32,
        AltErase = SDL_Scancode::SDL_SCANCODE_ALTERASE as i32,
        SysReq = SDL_Scancode::SDL_SCANCODE_SYSREQ as i32,
        Cancel = SDL_Scancode::SDL_SCANCODE_CANCEL as i32,
        Clear = SDL_Scancode::SDL_SCANCODE_CLEAR as i32,
        Prior = SDL_Scancode::SDL_SCANCODE_PRIOR as i32,
        Return2 = SDL_Scancode::SDL_SCANCODE_RETURN2 as i32,
        Separator = SDL_Scancode::SDL_SCANCODE_SEPARATOR as i32,
        Out = SDL_Scancode::SDL_SCANCODE_OUT as i32,
        Oper = SDL_Scancode::SDL_SCANCODE_OPER as i32,
        ClearAgain = SDL_Scancode::SDL_SCANCODE_CLEARAGAIN as i32,
        CrSel = SDL_Scancode::SDL_SCANCODE_CRSEL as i32,
        ExSel = SDL_Scancode::SDL_SCANCODE_EXSEL as i32,
        Kp00 = SDL_Scancode::SDL_SCANCODE_KP_00 as i32,
        Kp000 = SDL_Scancode::SDL_SCANCODE_KP_000 as i32,
        ThousandsSeparator = SDL_Scancode::SDL_SCANCODE_THOUSANDSSEPARATOR as i32,
        DecimalSeparator = SDL_Scancode::SDL_SCANCODE_DECIMALSEPARATOR as i32,
        CurrencyUnit = SDL_Scancode::SDL_SCANCODE_CURRENCYUNIT as i32,
        CurrencySubUnit = SDL_Scancode::SDL_SCANCODE_CURRENCYSUBUNIT as i32,
        KpLeftParen = SDL_Scancode::SDL_SCANCODE_KP_LEFTPAREN as i32,
        KpRightParen = SDL_Scancode::SDL_SCANCODE_KP_RIGHTPAREN as i32,
        KpLeftBrace = SDL_Scancode::SDL_SCANCODE_KP_LEFTBRACE as i32,
        KpRightBrace = SDL_Scancode::SDL_SCANCODE_KP_RIGHTBRACE as i32,
        KpTab = SDL_Scancode::SDL_SCANCODE_KP_TAB as i32,
        KpBackspace = SDL_Scancode::SDL_SCANCODE_KP_BACKSPACE as i32,
        KpA = SDL_Scancode::SDL_SCANCODE_KP_A as i32,
        KpB = SDL_Scancode::SDL_SCANCODE_KP_B as i32,
        KpC = SDL_Scancode::SDL_SCANCODE_KP_C as i32,
        KpD = SDL_Scancode::SDL_SCANCODE_KP_D as i32,
        KpE = SDL_Scancode::SDL_SCANCODE_KP_E as i32,
        KpF = SDL_Scancode::SDL_SCANCODE_KP_F as i32,
        KpXor = SDL_Scancode::SDL_SCANCODE_KP_XOR as i32,
        KpPower = SDL_Scancode::SDL_SCANCODE_KP_POWER as i32,
        KpPercent = SDL_Scancode::SDL_SCANCODE_KP_PERCENT as i32,
        KpLess = SDL_Scancode::SDL_SCANCODE_KP_LESS as i32,
        KpGreater = SDL_Scancode::SDL_SCANCODE_KP_GREATER as i32,
        KpAmpersand = SDL_Scancode::SDL_SCANCODE_KP_AMPERSAND as i32,
        KpDblAmpersand = SDL_Scancode::SDL_SCANCODE_KP_DBLAMPERSAND as i32,
        KpVerticalBar = SDL_Scancode::SDL_SCANCODE_KP_VERTICALBAR as i32,
        KpDblVerticalBar = SDL_Scancode::SDL_SCANCODE_KP_DBLVERTICALBAR as i32,
        KpColon = SDL_Scancode::SDL_SCANCODE_KP_COLON as i32,
        KpHash = SDL_Scancode::SDL_SCANCODE_KP_HASH as i32,
        KpSpace = SDL_Scancode::SDL_SCANCODE_KP_SPACE as i32,
        KpAt = SDL_Scancode::SDL_SCANCODE_KP_AT as i32,
        KpExclam = SDL_Scancode::SDL_SCANCODE_KP_EXCLAM as i32,
        KpMemStore = SDL_Scancode::SDL_SCANCODE_KP_MEMSTORE as i32,
        KpMemRecall = SDL_Scancode::SDL_SCANCODE_KP_MEMRECALL as i32,
        KpMemClear = SDL_Scancode::SDL_SCANCODE_KP_MEMCLEAR as i32,
        KpMemAdd = SDL_Scancode::SDL_SCANCODE_KP_MEMADD as i32,
        KpMemSubtract = SDL_Scancode::SDL_SCANCODE_KP_MEMSUBTRACT as i32,
        KpMemMultiply = SDL_Scancode::SDL_SCANCODE_KP_MEMMULTIPLY as i32,
        KpMemDivide = SDL_Scancode::SDL_SCANCODE_KP_MEMDIVIDE as i32,
        KpPlusMinus = SDL_Scancode::SDL_SCANCODE_KP_PLUSMINUS as i32,
        KpClear = SDL_Scancode::SDL_SCANCODE_KP_CLEAR as i32,
        KpClearEntry = SDL_Scancode::SDL_SCANCODE_KP_CLEARENTRY as i32,
        KpBinary = SDL_Scancode::SDL_SCANCODE_KP_BINARY as i32,
        KpOctal = SDL_Scancode::SDL_SCANCODE_KP_OCTAL as i32,
        KpDecimal = SDL_Scancode::SDL_SCANCODE_KP_DECIMAL as i32,
        KpHexadecimal = SDL_Scancode::SDL_SCANCODE_KP_HEXADECIMAL as i32,
        LCtrl = SDL_Scancode::SDL_SCANCODE_LCTRL as i32,
        LShift = SDL_Scancode::SDL_SCANCODE_LSHIFT as i32,
        LAlt = SDL_Scancode::SDL_SCANCODE_LALT as i32,
        LGui = SDL_Scancode::SDL_SCANCODE_LGUI as i32,
        RCtrl = SDL_Scancode::SDL_SCANCODE_RCTRL as i32,
        RShift = SDL_Scancode::SDL_SCANCODE_RSHIFT as i32,
        RAlt = SDL_Scancode::SDL_SCANCODE_RALT as i32,
        RGui = SDL_Scancode::SDL_SCANCODE_RGUI as i32,
        Mode = SDL_Scancode::SDL_SCANCODE_MODE as i32,
        AudioNext = SDL_Scancode::SDL_SCANCODE_AUDIONEXT as i32,
        AudioPrev = SDL_Scancode::SDL_SCANCODE_AUDIOPREV as i32,
        AudioStop = SDL_Scancode::SDL_SCANCODE_AUDIOSTOP as i32,
        AudioPlay = SDL_Scancode::SDL_SCANCODE_AUDIOPLAY as i32,
        AudioMute = SDL_Scancode::SDL_SCANCODE_AUDIOMUTE as i32,
        MediaSelect = SDL_Scancode::SDL_SCANCODE_MEDIASELECT as i32,
        Www = SDL_Scancode::SDL_SCANCODE_WWW as i32,
        Mail = SDL_Scancode::SDL_SCANCODE_MAIL as i32,
        Calculator = SDL_Scancode::SDL_SCANCODE_CALCULATOR as i32,
        Computer = SDL_Scancode::SDL_SCANCODE_COMPUTER as i32,
        AcSearch = SDL_Scancode::SDL_SCANCODE_AC_SEARCH as i32,
        AcHome = SDL_Scancode::SDL_SCANCODE_AC_HOME as i32,
        AcBack = SDL_Scancode::SDL_SCANCODE_AC_BACK as i32,
        AcForward = SDL_Scancode::SDL_SCANCODE_AC_FORWARD as i32,
        AcStop = SDL_Scancode::SDL_SCANCODE_AC_STOP as i32,
        AcRefresh = SDL_Scancode::SDL_SCANCODE_AC_REFRESH as i32,
        AcBookmarks = SDL_Scancode::SDL_SCANCODE_AC_BOOKMARKS as i32,
        BrightnessDown = SDL_Scancode::SDL_SCANCODE_BRIGHTNESSDOWN as i32,
        BrightnessUp = SDL_Scancode::SDL_SCANCODE_BRIGHTNESSUP as i32,
        DisplaySwitch = SDL_Scancode::SDL_SCANCODE_DISPLAYSWITCH as i32,
        KbdIllumToggle = SDL_Scancode::SDL_SCANCODE_KBDILLUMTOGGLE as i32,
        KbdIllumDown = SDL_Scancode::SDL_SCANCODE_KBDILLUMDOWN as i32,
        KbdIllumUp = SDL_Scancode::SDL_SCANCODE_KBDILLUMUP as i32,
        Eject = SDL_Scancode::SDL_SCANCODE_EJECT as i32,
        Sleep = SDL_Scancode::SDL_SCANCODE_SLEEP as i32,
        App1 = SDL_Scancode::SDL_SCANCODE_APP1 as i32,
        App2 = SDL_Scancode::SDL_SCANCODE_APP2 as i32,
        Num = SDL_Scancode::SDL_NUM_SCANCODES as i32,
    }

    impl Scancode {
        pub fn from_i32(n: i32) -> Option<Scancode> {
            use self::Scancode::*;
            let n = n as u32;

            Some(
                match unsafe { std::mem::transmute::<u32, SDL_Scancode>(n) } {
                    SDL_Scancode::SDL_SCANCODE_A => A,
                    SDL_Scancode::SDL_SCANCODE_B => B,
                    SDL_Scancode::SDL_SCANCODE_C => C,
                    SDL_Scancode::SDL_SCANCODE_D => D,
                    SDL_Scancode::SDL_SCANCODE_E => E,
                    SDL_Scancode::SDL_SCANCODE_F => F,
                    SDL_Scancode::SDL_SCANCODE_G => G,
                    SDL_Scancode::SDL_SCANCODE_H => H,
                    SDL_Scancode::SDL_SCANCODE_I => I,
                    SDL_Scancode::SDL_SCANCODE_J => J,
                    SDL_Scancode::SDL_SCANCODE_K => K,
                    SDL_Scancode::SDL_SCANCODE_L => L,
                    SDL_Scancode::SDL_SCANCODE_M => M,
                    SDL_Scancode::SDL_SCANCODE_N => N,
                    SDL_Scancode::SDL_SCANCODE_O => O,
                    SDL_Scancode::SDL_SCANCODE_P => P,
                    SDL_Scancode::SDL_SCANCODE_Q => Q,
                    SDL_Scancode::SDL_SCANCODE_R => R,
                    SDL_Scancode::SDL_SCANCODE_S => S,
                    SDL_Scancode::SDL_SCANCODE_T => T,
                    SDL_Scancode::SDL_SCANCODE_U => U,
                    SDL_Scancode::SDL_SCANCODE_V => V,
                    SDL_Scancode::SDL_SCANCODE_W => W,
                    SDL_Scancode::SDL_SCANCODE_X => X,
                    SDL_Scancode::SDL_SCANCODE_Y => Y,
                    SDL_Scancode::SDL_SCANCODE_Z => Z,
                    SDL_Scancode::SDL_SCANCODE_1 => Num1,
                    SDL_Scancode::SDL_SCANCODE_2 => Num2,
                    SDL_Scancode::SDL_SCANCODE_3 => Num3,
                    SDL_Scancode::SDL_SCANCODE_4 => Num4,
                    SDL_Scancode::SDL_SCANCODE_5 => Num5,
                    SDL_Scancode::SDL_SCANCODE_6 => Num6,
                    SDL_Scancode::SDL_SCANCODE_7 => Num7,
                    SDL_Scancode::SDL_SCANCODE_8 => Num8,
                    SDL_Scancode::SDL_SCANCODE_9 => Num9,
                    SDL_Scancode::SDL_SCANCODE_0 => Num0,
                    SDL_Scancode::SDL_SCANCODE_RETURN => Return,
                    SDL_Scancode::SDL_SCANCODE_ESCAPE => Escape,
                    SDL_Scancode::SDL_SCANCODE_BACKSPACE => Backspace,
                    SDL_Scancode::SDL_SCANCODE_TAB => Tab,
                    SDL_Scancode::SDL_SCANCODE_SPACE => Space,
                    SDL_Scancode::SDL_SCANCODE_MINUS => Minus,
                    SDL_Scancode::SDL_SCANCODE_EQUALS => Equals,
                    SDL_Scancode::SDL_SCANCODE_LEFTBRACKET => LeftBracket,
                    SDL_Scancode::SDL_SCANCODE_RIGHTBRACKET => RightBracket,
                    SDL_Scancode::SDL_SCANCODE_BACKSLASH => Backslash,
                    SDL_Scancode::SDL_SCANCODE_NONUSHASH => NonUsHash,
                    SDL_Scancode::SDL_SCANCODE_SEMICOLON => Semicolon,
                    SDL_Scancode::SDL_SCANCODE_APOSTROPHE => Apostrophe,
                    SDL_Scancode::SDL_SCANCODE_GRAVE => Grave,
                    SDL_Scancode::SDL_SCANCODE_COMMA => Comma,
                    SDL_Scancode::SDL_SCANCODE_PERIOD => Period,
                    SDL_Scancode::SDL_SCANCODE_SLASH => Slash,
                    SDL_Scancode::SDL_SCANCODE_CAPSLOCK => CapsLock,
                    SDL_Scancode::SDL_SCANCODE_F1 => F1,
                    SDL_Scancode::SDL_SCANCODE_F2 => F2,
                    SDL_Scancode::SDL_SCANCODE_F3 => F3,
                    SDL_Scancode::SDL_SCANCODE_F4 => F4,
                    SDL_Scancode::SDL_SCANCODE_F5 => F5,
                    SDL_Scancode::SDL_SCANCODE_F6 => F6,
                    SDL_Scancode::SDL_SCANCODE_F7 => F7,
                    SDL_Scancode::SDL_SCANCODE_F8 => F8,
                    SDL_Scancode::SDL_SCANCODE_F9 => F9,
                    SDL_Scancode::SDL_SCANCODE_F10 => F10,
                    SDL_Scancode::SDL_SCANCODE_F11 => F11,
                    SDL_Scancode::SDL_SCANCODE_F12 => F12,
                    SDL_Scancode::SDL_SCANCODE_PRINTSCREEN => PrintScreen,
                    SDL_Scancode::SDL_SCANCODE_SCROLLLOCK => ScrollLock,
                    SDL_Scancode::SDL_SCANCODE_PAUSE => Pause,
                    SDL_Scancode::SDL_SCANCODE_INSERT => Insert,
                    SDL_Scancode::SDL_SCANCODE_HOME => Home,
                    SDL_Scancode::SDL_SCANCODE_PAGEUP => PageUp,
                    SDL_Scancode::SDL_SCANCODE_DELETE => Delete,
                    SDL_Scancode::SDL_SCANCODE_END => End,
                    SDL_Scancode::SDL_SCANCODE_PAGEDOWN => PageDown,
                    SDL_Scancode::SDL_SCANCODE_RIGHT => Right,
                    SDL_Scancode::SDL_SCANCODE_LEFT => Left,
                    SDL_Scancode::SDL_SCANCODE_DOWN => Down,
                    SDL_Scancode::SDL_SCANCODE_UP => Up,
                    SDL_Scancode::SDL_SCANCODE_NUMLOCKCLEAR => NumLockClear,
                    SDL_Scancode::SDL_SCANCODE_KP_DIVIDE => KpDivide,
                    SDL_Scancode::SDL_SCANCODE_KP_MULTIPLY => KpMultiply,
                    SDL_Scancode::SDL_SCANCODE_KP_MINUS => KpMinus,
                    SDL_Scancode::SDL_SCANCODE_KP_PLUS => KpPlus,
                    SDL_Scancode::SDL_SCANCODE_KP_ENTER => KpEnter,
                    SDL_Scancode::SDL_SCANCODE_KP_1 => Kp1,
                    SDL_Scancode::SDL_SCANCODE_KP_2 => Kp2,
                    SDL_Scancode::SDL_SCANCODE_KP_3 => Kp3,
                    SDL_Scancode::SDL_SCANCODE_KP_4 => Kp4,
                    SDL_Scancode::SDL_SCANCODE_KP_5 => Kp5,
                    SDL_Scancode::SDL_SCANCODE_KP_6 => Kp6,
                    SDL_Scancode::SDL_SCANCODE_KP_7 => Kp7,
                    SDL_Scancode::SDL_SCANCODE_KP_8 => Kp8,
                    SDL_Scancode::SDL_SCANCODE_KP_9 => Kp9,
                    SDL_Scancode::SDL_SCANCODE_KP_0 => Kp0,
                    SDL_Scancode::SDL_SCANCODE_KP_PERIOD => KpPeriod,
                    SDL_Scancode::SDL_SCANCODE_NONUSBACKSLASH => NonUsBackslash,
                    SDL_Scancode::SDL_SCANCODE_APPLICATION => Application,
                    SDL_Scancode::SDL_SCANCODE_POWER => Power,
                    SDL_Scancode::SDL_SCANCODE_KP_EQUALS => KpEquals,
                    SDL_Scancode::SDL_SCANCODE_F13 => F13,
                    SDL_Scancode::SDL_SCANCODE_F14 => F14,
                    SDL_Scancode::SDL_SCANCODE_F15 => F15,
                    SDL_Scancode::SDL_SCANCODE_F16 => F16,
                    SDL_Scancode::SDL_SCANCODE_F17 => F17,
                    SDL_Scancode::SDL_SCANCODE_F18 => F18,
                    SDL_Scancode::SDL_SCANCODE_F19 => F19,
                    SDL_Scancode::SDL_SCANCODE_F20 => F20,
                    SDL_Scancode::SDL_SCANCODE_F21 => F21,
                    SDL_Scancode::SDL_SCANCODE_F22 => F22,
                    SDL_Scancode::SDL_SCANCODE_F23 => F23,
                    SDL_Scancode::SDL_SCANCODE_F24 => F24,
                    SDL_Scancode::SDL_SCANCODE_EXECUTE => Execute,
                    SDL_Scancode::SDL_SCANCODE_HELP => Help,
                    SDL_Scancode::SDL_SCANCODE_MENU => Menu,
                    SDL_Scancode::SDL_SCANCODE_SELECT => Select,
                    SDL_Scancode::SDL_SCANCODE_STOP => Stop,
                    SDL_Scancode::SDL_SCANCODE_AGAIN => Again,
                    SDL_Scancode::SDL_SCANCODE_UNDO => Undo,
                    SDL_Scancode::SDL_SCANCODE_CUT => Cut,
                    SDL_Scancode::SDL_SCANCODE_COPY => Copy,
                    SDL_Scancode::SDL_SCANCODE_PASTE => Paste,
                    SDL_Scancode::SDL_SCANCODE_FIND => Find,
                    SDL_Scancode::SDL_SCANCODE_MUTE => Mute,
                    SDL_Scancode::SDL_SCANCODE_VOLUMEUP => VolumeUp,
                    SDL_Scancode::SDL_SCANCODE_VOLUMEDOWN => VolumeDown,
                    SDL_Scancode::SDL_SCANCODE_KP_COMMA => KpComma,
                    SDL_Scancode::SDL_SCANCODE_KP_EQUALSAS400 => KpEqualsAS400,
                    SDL_Scancode::SDL_SCANCODE_INTERNATIONAL1 => International1,
                    SDL_Scancode::SDL_SCANCODE_INTERNATIONAL2 => International2,
                    SDL_Scancode::SDL_SCANCODE_INTERNATIONAL3 => International3,
                    SDL_Scancode::SDL_SCANCODE_INTERNATIONAL4 => International4,
                    SDL_Scancode::SDL_SCANCODE_INTERNATIONAL5 => International5,
                    SDL_Scancode::SDL_SCANCODE_INTERNATIONAL6 => International6,
                    SDL_Scancode::SDL_SCANCODE_INTERNATIONAL7 => International7,
                    SDL_Scancode::SDL_SCANCODE_INTERNATIONAL8 => International8,
                    SDL_Scancode::SDL_SCANCODE_INTERNATIONAL9 => International9,
                    SDL_Scancode::SDL_SCANCODE_LANG1 => Lang1,
                    SDL_Scancode::SDL_SCANCODE_LANG2 => Lang2,
                    SDL_Scancode::SDL_SCANCODE_LANG3 => Lang3,
                    SDL_Scancode::SDL_SCANCODE_LANG4 => Lang4,
                    SDL_Scancode::SDL_SCANCODE_LANG5 => Lang5,
                    SDL_Scancode::SDL_SCANCODE_LANG6 => Lang6,
                    SDL_Scancode::SDL_SCANCODE_LANG7 => Lang7,
                    SDL_Scancode::SDL_SCANCODE_LANG8 => Lang8,
                    SDL_Scancode::SDL_SCANCODE_LANG9 => Lang9,
                    SDL_Scancode::SDL_SCANCODE_ALTERASE => AltErase,
                    SDL_Scancode::SDL_SCANCODE_SYSREQ => SysReq,
                    SDL_Scancode::SDL_SCANCODE_CANCEL => Cancel,
                    SDL_Scancode::SDL_SCANCODE_CLEAR => Clear,
                    SDL_Scancode::SDL_SCANCODE_PRIOR => Prior,
                    SDL_Scancode::SDL_SCANCODE_RETURN2 => Return2,
                    SDL_Scancode::SDL_SCANCODE_SEPARATOR => Separator,
                    SDL_Scancode::SDL_SCANCODE_OUT => Out,
                    SDL_Scancode::SDL_SCANCODE_OPER => Oper,
                    SDL_Scancode::SDL_SCANCODE_CLEARAGAIN => ClearAgain,
                    SDL_Scancode::SDL_SCANCODE_CRSEL => CrSel,
                    SDL_Scancode::SDL_SCANCODE_EXSEL => ExSel,
                    SDL_Scancode::SDL_SCANCODE_KP_00 => Kp00,
                    SDL_Scancode::SDL_SCANCODE_KP_000 => Kp000,
                    SDL_Scancode::SDL_SCANCODE_THOUSANDSSEPARATOR => ThousandsSeparator,
                    SDL_Scancode::SDL_SCANCODE_DECIMALSEPARATOR => DecimalSeparator,
                    SDL_Scancode::SDL_SCANCODE_CURRENCYUNIT => CurrencyUnit,
                    SDL_Scancode::SDL_SCANCODE_CURRENCYSUBUNIT => CurrencySubUnit,
                    SDL_Scancode::SDL_SCANCODE_KP_LEFTPAREN => KpLeftParen,
                    SDL_Scancode::SDL_SCANCODE_KP_RIGHTPAREN => KpRightParen,
                    SDL_Scancode::SDL_SCANCODE_KP_LEFTBRACE => KpLeftBrace,
                    SDL_Scancode::SDL_SCANCODE_KP_RIGHTBRACE => KpRightBrace,
                    SDL_Scancode::SDL_SCANCODE_KP_TAB => KpTab,
                    SDL_Scancode::SDL_SCANCODE_KP_BACKSPACE => KpBackspace,
                    SDL_Scancode::SDL_SCANCODE_KP_A => KpA,
                    SDL_Scancode::SDL_SCANCODE_KP_B => KpB,
                    SDL_Scancode::SDL_SCANCODE_KP_C => KpC,
                    SDL_Scancode::SDL_SCANCODE_KP_D => KpD,
                    SDL_Scancode::SDL_SCANCODE_KP_E => KpE,
                    SDL_Scancode::SDL_SCANCODE_KP_F => KpF,
                    SDL_Scancode::SDL_SCANCODE_KP_XOR => KpXor,
                    SDL_Scancode::SDL_SCANCODE_KP_POWER => KpPower,
                    SDL_Scancode::SDL_SCANCODE_KP_PERCENT => KpPercent,
                    SDL_Scancode::SDL_SCANCODE_KP_LESS => KpLess,
                    SDL_Scancode::SDL_SCANCODE_KP_GREATER => KpGreater,
                    SDL_Scancode::SDL_SCANCODE_KP_AMPERSAND => KpAmpersand,
                    SDL_Scancode::SDL_SCANCODE_KP_DBLAMPERSAND => KpDblAmpersand,
                    SDL_Scancode::SDL_SCANCODE_KP_VERTICALBAR => KpVerticalBar,
                    SDL_Scancode::SDL_SCANCODE_KP_DBLVERTICALBAR => KpDblVerticalBar,
                    SDL_Scancode::SDL_SCANCODE_KP_COLON => KpColon,
                    SDL_Scancode::SDL_SCANCODE_KP_HASH => KpHash,
                    SDL_Scancode::SDL_SCANCODE_KP_SPACE => KpSpace,
                    SDL_Scancode::SDL_SCANCODE_KP_AT => KpAt,
                    SDL_Scancode::SDL_SCANCODE_KP_EXCLAM => KpExclam,
                    SDL_Scancode::SDL_SCANCODE_KP_MEMSTORE => KpMemStore,
                    SDL_Scancode::SDL_SCANCODE_KP_MEMRECALL => KpMemRecall,
                    SDL_Scancode::SDL_SCANCODE_KP_MEMCLEAR => KpMemClear,
                    SDL_Scancode::SDL_SCANCODE_KP_MEMADD => KpMemAdd,
                    SDL_Scancode::SDL_SCANCODE_KP_MEMSUBTRACT => KpMemSubtract,
                    SDL_Scancode::SDL_SCANCODE_KP_MEMMULTIPLY => KpMemMultiply,
                    SDL_Scancode::SDL_SCANCODE_KP_MEMDIVIDE => KpMemDivide,
                    SDL_Scancode::SDL_SCANCODE_KP_PLUSMINUS => KpPlusMinus,
                    SDL_Scancode::SDL_SCANCODE_KP_CLEAR => KpClear,
                    SDL_Scancode::SDL_SCANCODE_KP_CLEARENTRY => KpClearEntry,
                    SDL_Scancode::SDL_SCANCODE_KP_BINARY => KpBinary,
                    SDL_Scancode::SDL_SCANCODE_KP_OCTAL => KpOctal,
                    SDL_Scancode::SDL_SCANCODE_KP_DECIMAL => KpDecimal,
                    SDL_Scancode::SDL_SCANCODE_KP_HEXADECIMAL => KpHexadecimal,
                    SDL_Scancode::SDL_SCANCODE_LCTRL => LCtrl,
                    SDL_Scancode::SDL_SCANCODE_LSHIFT => LShift,
                    SDL_Scancode::SDL_SCANCODE_LALT => LAlt,
                    SDL_Scancode::SDL_SCANCODE_LGUI => LGui,
                    SDL_Scancode::SDL_SCANCODE_RCTRL => RCtrl,
                    SDL_Scancode::SDL_SCANCODE_RSHIFT => RShift,
                    SDL_Scancode::SDL_SCANCODE_RALT => RAlt,
                    SDL_Scancode::SDL_SCANCODE_RGUI => RGui,
                    SDL_Scancode::SDL_SCANCODE_MODE => Mode,
                    SDL_Scancode::SDL_SCANCODE_AUDIONEXT => AudioNext,
                    SDL_Scancode::SDL_SCANCODE_AUDIOPREV => AudioPrev,
                    SDL_Scancode::SDL_SCANCODE_AUDIOSTOP => AudioStop,
                    SDL_Scancode::SDL_SCANCODE_AUDIOPLAY => AudioPlay,
                    SDL_Scancode::SDL_SCANCODE_AUDIOMUTE => AudioMute,
                    SDL_Scancode::SDL_SCANCODE_MEDIASELECT => MediaSelect,
                    SDL_Scancode::SDL_SCANCODE_WWW => Www,
                    SDL_Scancode::SDL_SCANCODE_MAIL => Mail,
                    SDL_Scancode::SDL_SCANCODE_CALCULATOR => Calculator,
                    SDL_Scancode::SDL_SCANCODE_COMPUTER => Computer,
                    SDL_Scancode::SDL_SCANCODE_AC_SEARCH => AcSearch,
                    SDL_Scancode::SDL_SCANCODE_AC_HOME => AcHome,
                    SDL_Scancode::SDL_SCANCODE_AC_BACK => AcBack,
                    SDL_Scancode::SDL_SCANCODE_AC_FORWARD => AcForward,
                    SDL_Scancode::SDL_SCANCODE_AC_STOP => AcStop,
                    SDL_Scancode::SDL_SCANCODE_AC_REFRESH => AcRefresh,
                    SDL_Scancode::SDL_SCANCODE_AC_BOOKMARKS => AcBookmarks,
                    SDL_Scancode::SDL_SCANCODE_BRIGHTNESSDOWN => BrightnessDown,
                    SDL_Scancode::SDL_SCANCODE_BRIGHTNESSUP => BrightnessUp,
                    SDL_Scancode::SDL_SCANCODE_DISPLAYSWITCH => DisplaySwitch,
                    SDL_Scancode::SDL_SCANCODE_KBDILLUMTOGGLE => KbdIllumToggle,
                    SDL_Scancode::SDL_SCANCODE_KBDILLUMDOWN => KbdIllumDown,
                    SDL_Scancode::SDL_SCANCODE_KBDILLUMUP => KbdIllumUp,
                    SDL_Scancode::SDL_SCANCODE_EJECT => Eject,
                    SDL_Scancode::SDL_SCANCODE_SLEEP => Sleep,
                    SDL_Scancode::SDL_SCANCODE_APP1 => App1,
                    SDL_Scancode::SDL_SCANCODE_APP2 => App2,
                    SDL_Scancode::SDL_NUM_SCANCODES => Num,
                    _ => return None,
                },
            )
        }
    }

    #[repr(u32)]
    #[allow(non_camel_case_types, unused)]
    #[derive(Copy, Clone, Hash, PartialEq, Eq)]
    enum SDL_Scancode {
        SDL_SCANCODE_UNKNOWN = 0,
        SDL_SCANCODE_A = 4,
        SDL_SCANCODE_B = 5,
        SDL_SCANCODE_C = 6,
        SDL_SCANCODE_D = 7,
        SDL_SCANCODE_E = 8,
        SDL_SCANCODE_F = 9,
        SDL_SCANCODE_G = 10,
        SDL_SCANCODE_H = 11,
        SDL_SCANCODE_I = 12,
        SDL_SCANCODE_J = 13,
        SDL_SCANCODE_K = 14,
        SDL_SCANCODE_L = 15,
        SDL_SCANCODE_M = 16,
        SDL_SCANCODE_N = 17,
        SDL_SCANCODE_O = 18,
        SDL_SCANCODE_P = 19,
        SDL_SCANCODE_Q = 20,
        SDL_SCANCODE_R = 21,
        SDL_SCANCODE_S = 22,
        SDL_SCANCODE_T = 23,
        SDL_SCANCODE_U = 24,
        SDL_SCANCODE_V = 25,
        SDL_SCANCODE_W = 26,
        SDL_SCANCODE_X = 27,
        SDL_SCANCODE_Y = 28,
        SDL_SCANCODE_Z = 29,
        SDL_SCANCODE_1 = 30,
        SDL_SCANCODE_2 = 31,
        SDL_SCANCODE_3 = 32,
        SDL_SCANCODE_4 = 33,
        SDL_SCANCODE_5 = 34,
        SDL_SCANCODE_6 = 35,
        SDL_SCANCODE_7 = 36,
        SDL_SCANCODE_8 = 37,
        SDL_SCANCODE_9 = 38,
        SDL_SCANCODE_0 = 39,
        SDL_SCANCODE_RETURN = 40,
        SDL_SCANCODE_ESCAPE = 41,
        SDL_SCANCODE_BACKSPACE = 42,
        SDL_SCANCODE_TAB = 43,
        SDL_SCANCODE_SPACE = 44,
        SDL_SCANCODE_MINUS = 45,
        SDL_SCANCODE_EQUALS = 46,
        SDL_SCANCODE_LEFTBRACKET = 47,
        SDL_SCANCODE_RIGHTBRACKET = 48,
        #[doc = "< Located at the lower left of the return\n   key on ISO keyboards and at the right end\n   of the QWERTY row on ANSI keyboards.\n   Produces REVERSE SOLIDUS (backslash) and\n   VERTICAL LINE in a US layout, REVERSE\n   SOLIDUS and VERTICAL LINE in a UK Mac\n   layout, NUMBER SIGN and TILDE in a UK\n   Windows layout, DOLLAR SIGN and POUND SIGN\n   in a Swiss German layout, NUMBER SIGN and\n   APOSTROPHE in a German layout, GRAVE\n   ACCENT and POUND SIGN in a French Mac\n   layout, and ASTERISK and MICRO SIGN in a\n   French Windows layout."]
        SDL_SCANCODE_BACKSLASH = 49,
        #[doc = "< ISO USB keyboards actually use this code\n   instead of 49 for the same key, but all\n   OSes I've seen treat the two codes\n   identically. So, as an implementor, unless\n   your keyboard generates both of those\n   codes and your OS treats them differently,\n   you should generate SDL_SCANCODE_BACKSLASH\n   instead of this code. As a user, you\n   should not rely on this code because SDL\n   will never generate it with most (all?)\n   keyboards."]
        SDL_SCANCODE_NONUSHASH = 50,
        SDL_SCANCODE_SEMICOLON = 51,
        SDL_SCANCODE_APOSTROPHE = 52,
        #[doc = "< Located in the top left corner (on both ANSI\n   and ISO keyboards). Produces GRAVE ACCENT and\n   TILDE in a US Windows layout and in US and UK\n   Mac layouts on ANSI keyboards, GRAVE ACCENT\n   and NOT SIGN in a UK Windows layout, SECTION\n   SIGN and PLUS-MINUS SIGN in US and UK Mac\n   layouts on ISO keyboards, SECTION SIGN and\n   DEGREE SIGN in a Swiss German layout (Mac:\n   only on ISO keyboards), CIRCUMFLEX ACCENT and\n   DEGREE SIGN in a German layout (Mac: only on\n   ISO keyboards), SUPERSCRIPT TWO and TILDE in a\n   French Windows layout, COMMERCIAL AT and\n   NUMBER SIGN in a French Mac layout on ISO\n   keyboards, and LESS-THAN SIGN and GREATER-THAN\n   SIGN in a Swiss German, German, or French Mac\n   layout on ANSI keyboards."]
        SDL_SCANCODE_GRAVE = 53,
        SDL_SCANCODE_COMMA = 54,
        SDL_SCANCODE_PERIOD = 55,
        SDL_SCANCODE_SLASH = 56,
        SDL_SCANCODE_CAPSLOCK = 57,
        SDL_SCANCODE_F1 = 58,
        SDL_SCANCODE_F2 = 59,
        SDL_SCANCODE_F3 = 60,
        SDL_SCANCODE_F4 = 61,
        SDL_SCANCODE_F5 = 62,
        SDL_SCANCODE_F6 = 63,
        SDL_SCANCODE_F7 = 64,
        SDL_SCANCODE_F8 = 65,
        SDL_SCANCODE_F9 = 66,
        SDL_SCANCODE_F10 = 67,
        SDL_SCANCODE_F11 = 68,
        SDL_SCANCODE_F12 = 69,
        SDL_SCANCODE_PRINTSCREEN = 70,
        SDL_SCANCODE_SCROLLLOCK = 71,
        SDL_SCANCODE_PAUSE = 72,
        #[doc = "< insert on PC, help on some Mac keyboards (but\ndoes send code 73, not 117)"]
        SDL_SCANCODE_INSERT = 73,
        SDL_SCANCODE_HOME = 74,
        SDL_SCANCODE_PAGEUP = 75,
        SDL_SCANCODE_DELETE = 76,
        SDL_SCANCODE_END = 77,
        SDL_SCANCODE_PAGEDOWN = 78,
        SDL_SCANCODE_RIGHT = 79,
        SDL_SCANCODE_LEFT = 80,
        SDL_SCANCODE_DOWN = 81,
        SDL_SCANCODE_UP = 82,
        #[doc = "< num lock on PC, clear on Mac keyboards"]
        SDL_SCANCODE_NUMLOCKCLEAR = 83,
        SDL_SCANCODE_KP_DIVIDE = 84,
        SDL_SCANCODE_KP_MULTIPLY = 85,
        SDL_SCANCODE_KP_MINUS = 86,
        SDL_SCANCODE_KP_PLUS = 87,
        SDL_SCANCODE_KP_ENTER = 88,
        SDL_SCANCODE_KP_1 = 89,
        SDL_SCANCODE_KP_2 = 90,
        SDL_SCANCODE_KP_3 = 91,
        SDL_SCANCODE_KP_4 = 92,
        SDL_SCANCODE_KP_5 = 93,
        SDL_SCANCODE_KP_6 = 94,
        SDL_SCANCODE_KP_7 = 95,
        SDL_SCANCODE_KP_8 = 96,
        SDL_SCANCODE_KP_9 = 97,
        SDL_SCANCODE_KP_0 = 98,
        SDL_SCANCODE_KP_PERIOD = 99,
        #[doc = "< This is the additional key that ISO\n   keyboards have over ANSI ones,\n   located between left shift and Y.\n   Produces GRAVE ACCENT and TILDE in a\n   US or UK Mac layout, REVERSE SOLIDUS\n   (backslash) and VERTICAL LINE in a\n   US or UK Windows layout, and\n   LESS-THAN SIGN and GREATER-THAN SIGN\n   in a Swiss German, German, or French\n   layout."]
        SDL_SCANCODE_NONUSBACKSLASH = 100,
        #[doc = "< windows contextual menu, compose"]
        SDL_SCANCODE_APPLICATION = 101,
        #[doc = "< The USB document says this is a status flag,\n   not a physical key - but some Mac keyboards\n   do have a power key."]
        SDL_SCANCODE_POWER = 102,
        SDL_SCANCODE_KP_EQUALS = 103,
        SDL_SCANCODE_F13 = 104,
        SDL_SCANCODE_F14 = 105,
        SDL_SCANCODE_F15 = 106,
        SDL_SCANCODE_F16 = 107,
        SDL_SCANCODE_F17 = 108,
        SDL_SCANCODE_F18 = 109,
        SDL_SCANCODE_F19 = 110,
        SDL_SCANCODE_F20 = 111,
        SDL_SCANCODE_F21 = 112,
        SDL_SCANCODE_F22 = 113,
        SDL_SCANCODE_F23 = 114,
        SDL_SCANCODE_F24 = 115,
        SDL_SCANCODE_EXECUTE = 116,
        #[doc = "< AL Integrated Help Center"]
        SDL_SCANCODE_HELP = 117,
        #[doc = "< Menu (show menu)"]
        SDL_SCANCODE_MENU = 118,
        SDL_SCANCODE_SELECT = 119,
        #[doc = "< AC Stop"]
        SDL_SCANCODE_STOP = 120,
        #[doc = "< AC Redo/Repeat"]
        SDL_SCANCODE_AGAIN = 121,
        #[doc = "< AC Undo"]
        SDL_SCANCODE_UNDO = 122,
        #[doc = "< AC Cut"]
        SDL_SCANCODE_CUT = 123,
        #[doc = "< AC Copy"]
        SDL_SCANCODE_COPY = 124,
        #[doc = "< AC Paste"]
        SDL_SCANCODE_PASTE = 125,
        #[doc = "< AC Find"]
        SDL_SCANCODE_FIND = 126,
        SDL_SCANCODE_MUTE = 127,
        SDL_SCANCODE_VOLUMEUP = 128,
        SDL_SCANCODE_VOLUMEDOWN = 129,
        SDL_SCANCODE_KP_COMMA = 133,
        SDL_SCANCODE_KP_EQUALSAS400 = 134,
        #[doc = "< used on Asian keyboards, see\nfootnotes in USB doc"]
        SDL_SCANCODE_INTERNATIONAL1 = 135,
        SDL_SCANCODE_INTERNATIONAL2 = 136,
        #[doc = "< Yen"]
        SDL_SCANCODE_INTERNATIONAL3 = 137,
        SDL_SCANCODE_INTERNATIONAL4 = 138,
        SDL_SCANCODE_INTERNATIONAL5 = 139,
        SDL_SCANCODE_INTERNATIONAL6 = 140,
        SDL_SCANCODE_INTERNATIONAL7 = 141,
        SDL_SCANCODE_INTERNATIONAL8 = 142,
        SDL_SCANCODE_INTERNATIONAL9 = 143,
        #[doc = "< Hangul/English toggle"]
        SDL_SCANCODE_LANG1 = 144,
        #[doc = "< Hanja conversion"]
        SDL_SCANCODE_LANG2 = 145,
        #[doc = "< Katakana"]
        SDL_SCANCODE_LANG3 = 146,
        #[doc = "< Hiragana"]
        SDL_SCANCODE_LANG4 = 147,
        #[doc = "< Zenkaku/Hankaku"]
        SDL_SCANCODE_LANG5 = 148,
        #[doc = "< reserved"]
        SDL_SCANCODE_LANG6 = 149,
        #[doc = "< reserved"]
        SDL_SCANCODE_LANG7 = 150,
        #[doc = "< reserved"]
        SDL_SCANCODE_LANG8 = 151,
        #[doc = "< reserved"]
        SDL_SCANCODE_LANG9 = 152,
        #[doc = "< Erase-Eaze"]
        SDL_SCANCODE_ALTERASE = 153,
        SDL_SCANCODE_SYSREQ = 154,
        #[doc = "< AC Cancel"]
        SDL_SCANCODE_CANCEL = 155,
        SDL_SCANCODE_CLEAR = 156,
        SDL_SCANCODE_PRIOR = 157,
        SDL_SCANCODE_RETURN2 = 158,
        SDL_SCANCODE_SEPARATOR = 159,
        SDL_SCANCODE_OUT = 160,
        SDL_SCANCODE_OPER = 161,
        SDL_SCANCODE_CLEARAGAIN = 162,
        SDL_SCANCODE_CRSEL = 163,
        SDL_SCANCODE_EXSEL = 164,
        SDL_SCANCODE_KP_00 = 176,
        SDL_SCANCODE_KP_000 = 177,
        SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
        SDL_SCANCODE_DECIMALSEPARATOR = 179,
        SDL_SCANCODE_CURRENCYUNIT = 180,
        SDL_SCANCODE_CURRENCYSUBUNIT = 181,
        SDL_SCANCODE_KP_LEFTPAREN = 182,
        SDL_SCANCODE_KP_RIGHTPAREN = 183,
        SDL_SCANCODE_KP_LEFTBRACE = 184,
        SDL_SCANCODE_KP_RIGHTBRACE = 185,
        SDL_SCANCODE_KP_TAB = 186,
        SDL_SCANCODE_KP_BACKSPACE = 187,
        SDL_SCANCODE_KP_A = 188,
        SDL_SCANCODE_KP_B = 189,
        SDL_SCANCODE_KP_C = 190,
        SDL_SCANCODE_KP_D = 191,
        SDL_SCANCODE_KP_E = 192,
        SDL_SCANCODE_KP_F = 193,
        SDL_SCANCODE_KP_XOR = 194,
        SDL_SCANCODE_KP_POWER = 195,
        SDL_SCANCODE_KP_PERCENT = 196,
        SDL_SCANCODE_KP_LESS = 197,
        SDL_SCANCODE_KP_GREATER = 198,
        SDL_SCANCODE_KP_AMPERSAND = 199,
        SDL_SCANCODE_KP_DBLAMPERSAND = 200,
        SDL_SCANCODE_KP_VERTICALBAR = 201,
        SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
        SDL_SCANCODE_KP_COLON = 203,
        SDL_SCANCODE_KP_HASH = 204,
        SDL_SCANCODE_KP_SPACE = 205,
        SDL_SCANCODE_KP_AT = 206,
        SDL_SCANCODE_KP_EXCLAM = 207,
        SDL_SCANCODE_KP_MEMSTORE = 208,
        SDL_SCANCODE_KP_MEMRECALL = 209,
        SDL_SCANCODE_KP_MEMCLEAR = 210,
        SDL_SCANCODE_KP_MEMADD = 211,
        SDL_SCANCODE_KP_MEMSUBTRACT = 212,
        SDL_SCANCODE_KP_MEMMULTIPLY = 213,
        SDL_SCANCODE_KP_MEMDIVIDE = 214,
        SDL_SCANCODE_KP_PLUSMINUS = 215,
        SDL_SCANCODE_KP_CLEAR = 216,
        SDL_SCANCODE_KP_CLEARENTRY = 217,
        SDL_SCANCODE_KP_BINARY = 218,
        SDL_SCANCODE_KP_OCTAL = 219,
        SDL_SCANCODE_KP_DECIMAL = 220,
        SDL_SCANCODE_KP_HEXADECIMAL = 221,
        SDL_SCANCODE_LCTRL = 224,
        SDL_SCANCODE_LSHIFT = 225,
        #[doc = "< alt, option"]
        SDL_SCANCODE_LALT = 226,
        #[doc = "< windows, command (apple), meta"]
        SDL_SCANCODE_LGUI = 227,
        SDL_SCANCODE_RCTRL = 228,
        SDL_SCANCODE_RSHIFT = 229,
        #[doc = "< alt gr, option"]
        SDL_SCANCODE_RALT = 230,
        #[doc = "< windows, command (apple), meta"]
        SDL_SCANCODE_RGUI = 231,
        #[doc = "< I'm not sure if this is really not covered\n   by any of the above, but since there's a\n   special KMOD_MODE for it I'm adding it here"]
        SDL_SCANCODE_MODE = 257,
        SDL_SCANCODE_AUDIONEXT = 258,
        SDL_SCANCODE_AUDIOPREV = 259,
        SDL_SCANCODE_AUDIOSTOP = 260,
        SDL_SCANCODE_AUDIOPLAY = 261,
        SDL_SCANCODE_AUDIOMUTE = 262,
        SDL_SCANCODE_MEDIASELECT = 263,
        #[doc = "< AL Internet Browser"]
        SDL_SCANCODE_WWW = 264,
        SDL_SCANCODE_MAIL = 265,
        #[doc = "< AL Calculator"]
        SDL_SCANCODE_CALCULATOR = 266,
        SDL_SCANCODE_COMPUTER = 267,
        #[doc = "< AC Search"]
        SDL_SCANCODE_AC_SEARCH = 268,
        #[doc = "< AC Home"]
        SDL_SCANCODE_AC_HOME = 269,
        #[doc = "< AC Back"]
        SDL_SCANCODE_AC_BACK = 270,
        #[doc = "< AC Forward"]
        SDL_SCANCODE_AC_FORWARD = 271,
        #[doc = "< AC Stop"]
        SDL_SCANCODE_AC_STOP = 272,
        #[doc = "< AC Refresh"]
        SDL_SCANCODE_AC_REFRESH = 273,
        #[doc = "< AC Bookmarks"]
        SDL_SCANCODE_AC_BOOKMARKS = 274,
        SDL_SCANCODE_BRIGHTNESSDOWN = 275,
        SDL_SCANCODE_BRIGHTNESSUP = 276,
        #[doc = "< display mirroring/dual display\nswitch, video mode switch"]
        SDL_SCANCODE_DISPLAYSWITCH = 277,
        SDL_SCANCODE_KBDILLUMTOGGLE = 278,
        SDL_SCANCODE_KBDILLUMDOWN = 279,
        SDL_SCANCODE_KBDILLUMUP = 280,
        SDL_SCANCODE_EJECT = 281,
        #[doc = "< SC System Sleep"]
        SDL_SCANCODE_SLEEP = 282,
        SDL_SCANCODE_APP1 = 283,
        SDL_SCANCODE_APP2 = 284,
        SDL_SCANCODE_AUDIOREWIND = 285,
        SDL_SCANCODE_AUDIOFASTFORWARD = 286,
        #[doc = "< Usually situated below the display on phones and\nused as a multi-function feature key for selecting\na software defined function shown on the bottom left\nof the display."]
        SDL_SCANCODE_SOFTLEFT = 287,
        #[doc = "< Usually situated below the display on phones and\nused as a multi-function feature key for selecting\na software defined function shown on the bottom right\nof the display."]
        SDL_SCANCODE_SOFTRIGHT = 288,
        #[doc = "< Used for accepting phone calls."]
        SDL_SCANCODE_CALL = 289,
        #[doc = "< Used for rejecting phone calls."]
        SDL_SCANCODE_ENDCALL = 290,
        #[doc = "< not a key, just marks the number of scancodes\nfor array bounds"]
        SDL_NUM_SCANCODES = 512,
    }
}
#[cfg(not(feature = "sdl2"))]
pub use enums::*;

#[cfg(feature = "sdl2")]
pub use sdl2::keyboard::{Keycode, Mod, Scancode};
